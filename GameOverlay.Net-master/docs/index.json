{
  "api/GameOverlay.Drawing.Circle.html": {
    "href": "api/GameOverlay.Drawing.Circle.html",
    "title": "Struct Circle | GameOverlay.Net Documentation",
    "keywords": "Struct Circle Represents the dimension of a circle. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Circle Constructors | Improve this Doc View Source Circle(Point, Int32) Initializes a new Circle by using the given location and radius. Declaration public Circle(Point location, int radius) Parameters Type Name Description Point location A Point structure including the x- and y-coordinates of the center of a circle. Int32 radius The radius of a circle. | Improve this Doc View Source Circle(Point, Single) Initializes a new Circle by using the given location and radius. Declaration public Circle(Point location, float radius) Parameters Type Name Description Point location A Point structure including the x- and y-coordinates of the center of a circle. Single radius The radius of a circle. | Improve this Doc View Source Circle(Int32, Int32, Int32) Initializes a new Circle by using the given location and radius. Declaration public Circle(int x, int y, int radius) Parameters Type Name Description Int32 x The x-coordinate of the center of a circle. Int32 y The y-coordinate of the center of a circle. Int32 radius The radius of a circle. | Improve this Doc View Source Circle(Single, Single, Single) Initializes a new Circle by using the given location and radius. Declaration public Circle(float x, float y, float radius) Parameters Type Name Description Single x The x-coordinate of the center of a circle. Single y The y-coordinate of the center of a circle. Single radius The radius of a circle. Fields | Improve this Doc View Source Location The position of this Circle. Declaration public Point Location Field Value Type Description Point | Improve this Doc View Source Radius The Radius of this Circle. Declaration public float Radius Field Value Type Description Single Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Circle and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts the Circle structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Circle. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Circle, Circle) Determines whether two specified instances are equal. Declaration public static bool operator ==(Circle left, Circle right) Parameters Type Name Description Circle left The first object to compare. Circle right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(Circle to Ellipse) Converts this Circle to a SharpDX ellipse. Declaration public static implicit operator Ellipse(Circle circle) Parameters Type Name Description Circle circle A Circle structure. Returns Type Description SharpDX.Direct2D1.Ellipse | Improve this Doc View Source Inequality(Circle, Circle) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Circle left, Circle right) Parameters Type Name Description Circle left The first object to compare. Circle right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.Color.html": {
    "href": "api/GameOverlay.Drawing.Color.html",
    "title": "Struct Color | GameOverlay.Net Documentation",
    "keywords": "Struct Color Represents an ARGB (alpha, red, green, blue) Color. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Color Constructors | Improve this Doc View Source Color(Color, Byte) Initializes a new Color using the specified Color and the alpha value. Declaration public Color(Color color, byte alpha = 255) Parameters Type Name Description Color color A Color structure. Byte alpha The alpha component of the Color. | Improve this Doc View Source Color(Color, Int32) Initializes a new Color using the specified Color and the alpha value. Declaration public Color(Color color, int alpha = 255) Parameters Type Name Description Color color A Color structure. Int32 alpha The alpha component of the Color. | Improve this Doc View Source Color(Color, Single) Initializes a new Color using the specified Color and the alpha value. Declaration public Color(Color color, float alpha = 1F) Parameters Type Name Description Color color A Color structure. Single alpha The alpha component of the Color. | Improve this Doc View Source Color(Byte, Byte, Byte, Byte) Initializes a new Color using the specified components. Declaration public Color(byte r, byte g, byte b, byte a = 255) Parameters Type Name Description Byte r The red component value of this Color. Byte g The green component value of this Color. Byte b The blue component value of this Color. Byte a The alpha component value of this Color. | Improve this Doc View Source Color(Int32, Int32, Int32, Int32) Initializes a new Color using the specified components. Declaration public Color(int r, int g, int b, int a = 255) Parameters Type Name Description Int32 r The red component value of this Color. Int32 g The green component value of this Color. Int32 b The blue component value of this Color. Int32 a The alpha component value of this Color. | Improve this Doc View Source Color(Single, Single, Single, Single) Initializes a new Color using the specified components. Declaration public Color(float r, float g, float b, float a = 1F) Parameters Type Name Description Single r The red component value of this Color. Single g The green component value of this Color. Single b The blue component value of this Color. Single a The alpha component value of this Color. Fields | Improve this Doc View Source A Gets the alpha component value of this Color. Declaration public float A Field Value Type Description Single | Improve this Doc View Source B Gets the blue component value of this Color. Declaration public float B Field Value Type Description Single | Improve this Doc View Source G Gets the green component value of this Color. Declaration public float G Field Value Type Description Single | Improve this Doc View Source R Gets the red component value of this Color. Declaration public float R Field Value Type Description Single Properties | Improve this Doc View Source Blue Returns a blue Color. Declaration public static Color Blue { get; } Property Value Type Description Color | Improve this Doc View Source Green Returns a green Color. Declaration public static Color Green { get; } Property Value Type Description Color | Improve this Doc View Source Red Returns a red Color. Declaration public static Color Red { get; } Property Value Type Description Color | Improve this Doc View Source Transparent Returns a transparent Color. Declaration public static Color Transparent { get; } Property Value Type Description Color Methods | Improve this Doc View Source Equals(Color) Returns a value indicating whether two specified instances of Color represent the same value. Declaration public bool Equals(Color value) Parameters Type Name Description Color value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Color, Color) Returns a value indicating whether two specified instances of Color represent the same value. Declaration public static bool Equals(Color left, Color right) Parameters Type Name Description Color left The first object to compare. Color right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Color and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source FromARGB(Int32) Creates a Color structure from a 32-bit ARGB value. Declaration public static Color FromARGB(int value) Parameters Type Name Description Int32 value A value specifying the 32-bit ARGB value. Returns Type Description Color The Color structure that this method creates. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToARGB() Gets the 32-bit ARGB value of this Color structure. Declaration public int ToARGB() Returns Type Description Int32 The 32-bit ARGB value of this Color. | Improve this Doc View Source ToString() Converts this Color structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Color. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Color, Color) Determines whether two specified instances are equal. Declaration public static bool operator ==(Color left, Color right) Parameters Type Name Description Color left The first object to compare. Color right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(Color to RawColor4) Converts a Color to a SharpDX RawColor4 Declaration public static implicit operator RawColor4(Color color) Parameters Type Name Description Color color Returns Type Description SharpDX.Mathematics.Interop.RawColor4 | Improve this Doc View Source Implicit(RawColor4 to Color) Converts a SharpDX RawColor4 to a Color Declaration public static implicit operator Color(RawColor4 color) Parameters Type Name Description SharpDX.Mathematics.Interop.RawColor4 color A RawColor4 Returns Type Description Color | Improve this Doc View Source Inequality(Color, Color) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Color left, Color right) Parameters Type Name Description Color left The first object to compare. Color right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.CrosshairStyle.html": {
    "href": "api/GameOverlay.Drawing.CrosshairStyle.html",
    "title": "Enum CrosshairStyle | GameOverlay.Net Documentation",
    "keywords": "Enum CrosshairStyle Offers different built-in styles for crosshairs Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public enum CrosshairStyle Fields Name Description Cross Draws a cross Diagonal Draws diagonal lines Dot Draws a single dot Gap Draws a + with a gap in the middle Plus Draws a +"
  },
  "api/GameOverlay.Drawing.Ellipse.html": {
    "href": "api/GameOverlay.Drawing.Ellipse.html",
    "title": "Struct Ellipse | GameOverlay.Net Documentation",
    "keywords": "Struct Ellipse Represents the dimension of an ellipse. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Ellipse Constructors | Improve this Doc View Source Ellipse(Point, Int32, Int32) Initializes a new Ellipse using the given location and radius. Declaration public Ellipse(Point location, int radiusX, int radiusY) Parameters Type Name Description Point location A Location structure including the center x- and y-coordinate of an ellipse. Int32 radiusX The radius on the x-axis of this ellipse. Int32 radiusY The radius on the y-axis of this ellipse. | Improve this Doc View Source Ellipse(Point, Single, Single) Initializes a new Ellipse using the given location and radius. Declaration public Ellipse(Point location, float radiusX, float radiusY) Parameters Type Name Description Point location A Location structure including the center x- and y-coordinate of an ellipse. Single radiusX The radius on the x-axis of this ellipse. Single radiusY The radius on the y-axis of this ellipse. | Improve this Doc View Source Ellipse(Int32, Int32, Int32, Int32) Initializes a new Ellipse using the given location and radius. Declaration public Ellipse(int x, int y, int radiusX, int radiusY) Parameters Type Name Description Int32 x The center x-coordinate of an ellipse. Int32 y The center y-coordinate of an ellipse. Int32 radiusX The radius on the x-axis of this ellipse. Int32 radiusY The radius on the y-axis of this ellipse. | Improve this Doc View Source Ellipse(Single, Single, Single, Single) Initializes a new Ellipse using the given location and radius. Declaration public Ellipse(float x, float y, float radiusX, float radiusY) Parameters Type Name Description Single x The center x-coordinate of an ellipse. Single y The center y-coordinate of an ellipse. Single radiusX The radius on the x-axis of this ellipse. Single radiusY The radius on the y-axis of this ellipse. Fields | Improve this Doc View Source Location The position of this ellipse. Declaration public Point Location Field Value Type Description Point | Improve this Doc View Source RadiusX The radius on the x-axis of this ellipse. Declaration public float RadiusX Field Value Type Description Single | Improve this Doc View Source RadiusY The radius on the y-axis of this ellipse. Declaration public float RadiusY Field Value Type Description Single Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Ellipse and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts the Ellipse structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Ellipse. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Ellipse, Ellipse) Determines whether two specified instances are equal. Declaration public static bool operator ==(Ellipse left, Ellipse right) Parameters Type Name Description Ellipse left The first object to compare. Ellipse right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(Ellipse to Ellipse) Converts an Ellipse to a SharpDX Ellipse. Declaration public static implicit operator Ellipse(Ellipse ellipse) Parameters Type Name Description Ellipse ellipse An Ellipse structure. Returns Type Description SharpDX.Direct2D1.Ellipse | Improve this Doc View Source Inequality(Ellipse, Ellipse) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Ellipse left, Ellipse right) Parameters Type Name Description Ellipse left The first object to compare. Ellipse right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.Font.html": {
    "href": "api/GameOverlay.Drawing.Font.html",
    "title": "Class Font | GameOverlay.Net Documentation",
    "keywords": "Class Font Defines a particular format for text, including font family name, size, and style attributes. Inheritance Object Font Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class Font : IDisposable Constructors | Improve this Doc View Source Font(Factory, String, Single, Boolean, Boolean, Boolean) Initializes a new Font by using the specified name and style. Declaration public Font(Factory factory, string fontFamilyName, float size, bool bold = false, bool italic = false, bool wordWrapping = false) Parameters Type Name Description SharpDX.DirectWrite.Factory factory The FontFactory from your Graphics device. String fontFamilyName The name of the font family. Single size The size of this Font. Boolean bold A Boolean value indicating whether this Font is bold. Boolean italic A Boolean value indicating whether this Font is italic. Boolean wordWrapping A Boolean value indicating whether this Font uses word wrapping. | Improve this Doc View Source Font(TextFormat) Initializes a new Font by using the given text format. Declaration public Font(TextFormat textFormat) Parameters Type Name Description SharpDX.DirectWrite.TextFormat textFormat Fields | Improve this Doc View Source TextFormat A Direct2D TextFormat. Declaration public TextFormat TextFormat Field Value Type Description SharpDX.DirectWrite.TextFormat Properties | Improve this Doc View Source Bold Gets a value that indicates whether this Font is bold. Declaration public bool Bold { get; } Property Value Type Description Boolean | Improve this Doc View Source FontFamilyName Gets the name of this Fonts family Declaration public string FontFamilyName { get; } Property Value Type Description String | Improve this Doc View Source FontSize Gets the size of this Font measured in pixels. Declaration public float FontSize { get; } Property Value Type Description Single | Improve this Doc View Source Italic Gets a value that indicates whether this Font is italic. Declaration public bool Italic { get; } Property Value Type Description Boolean | Improve this Doc View Source WordWeapping Enables or disables word wrapping for this Font. Declaration public bool WordWeapping { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Releases all resources used by this Font. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this Font. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(Font) Returns a value indicating whether two specified instances of Font represent the same value. Declaration public bool Equals(Font value) Parameters Type Name Description Font value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Font, Font) Returns a value indicating whether two specified instances of Font represent the same value. Declaration public static bool Equals(Font left, Font right) Parameters Type Name Description Font left The first object to compare. Font right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Font and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts this Font instance to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Font. Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Font to TextFormat) Converts this Font to a Direct2D TextFormat. Declaration public static implicit operator TextFormat(Font font) Parameters Type Name Description Font font Returns Type Description SharpDX.DirectWrite.TextFormat Implements System.IDisposable"
  },
  "api/GameOverlay.Drawing.Geometry.html": {
    "href": "api/GameOverlay.Drawing.Geometry.html",
    "title": "Class Geometry | GameOverlay.Net Documentation",
    "keywords": "Class Geometry Represents a Geometry which can be drawn by a Graphics device. Inheritance Object Geometry Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class Geometry : IDisposable Constructors | Improve this Doc View Source Geometry(Graphics) Initializes a new Geometry using a Graphics device. Declaration public Geometry(Graphics device) Parameters Type Name Description Graphics device Properties | Improve this Doc View Source IsOpen Determines whether this Geometry is open. Declaration public bool IsOpen { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source AddCurve(Point, Single, Single) Adds a curved line to the currently open figure. Declaration public void AddCurve(Point point, float radius, float rotationAngle = 0F) Parameters Type Name Description Point point The end point of the curved line. Single radius The radius of the resulting arc in degrees. Single rotationAngle A value determining the rotation angle this curve. | Improve this Doc View Source AddCurve(Point, Single, Single, Single) Adds a curved line to the currently open figure. Declaration public void AddCurve(Point point, float radius_x, float radius_y, float rotationAngle = 0F) Parameters Type Name Description Point point The end point of the curved line. Single radius_x The radius on the X-Axis of the resulting arc in degrees. Single radius_y The radius on the Y-Axis of the resulting arc in degrees. Single rotationAngle A value determining the rotation angle this curve. | Improve this Doc View Source AddPoint(Point) Adds a new Point within the current figure. Declaration public void AddPoint(Point point) Parameters Type Name Description Point point A Point which will be added to this figure | Improve this Doc View Source AddRectangle(Rectangle, Boolean) Creates a new figure from a Rectangle. Declaration public void AddRectangle(Rectangle rectangle, bool fill = false) Parameters Type Name Description Rectangle rectangle The Rectangle used to create a new figure. Boolean fill A Boolean value determining whether this figure can be filled by a Graphics device. | Improve this Doc View Source BeginFigure(Line, Boolean) Starts a new figure within this Geometry using a starting line. Declaration public void BeginFigure(Line line, bool fill = false) Parameters Type Name Description Line line The first line within this figure. Boolean fill A Boolean value determining whether this figure can be filled by a Graphics device. | Improve this Doc View Source BeginFigure(Point, Boolean) Starts a new figure within this Geometry using a starting point. Declaration public void BeginFigure(Point point, bool fill = false) Parameters Type Name Description Point point The start point for this figure. Boolean fill A Boolean value determining whether this figure can be filled by a Graphics device. | Improve this Doc View Source Close() Closes this Geometry and prevents further manipulation. Declaration public void Close() | Improve this Doc View Source Dispose() Releases all resources used by this Geometry. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this Geometry. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source EndFigure(Boolean) Ends the currently started figure. Declaration public void EndFigure(bool closed = true) Parameters Type Name Description Boolean closed A Boolean value indicating whether this figure should automatically be closen by the Graphics device. | Improve this Doc View Source Equals(Geometry) Returns a value indicating whether two specified instances of Geometry represent the same value. Declaration public bool Equals(Geometry value) Parameters Type Name Description Geometry value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Geometry, Geometry) Returns a value indicating whether two specified instances of Geometry represent the same value. Declaration public static bool Equals(Geometry left, Geometry right) Parameters Type Name Description Geometry left The first object to compare. Geometry right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Geometry and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts this Geometry instance to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Geometry. Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Geometry to Geometry) Returns the Direct2D Geometry used by this object. Declaration public static implicit operator Geometry(Geometry geometry) Parameters Type Name Description Geometry geometry Returns Type Description SharpDX.Direct2D1.Geometry Implements System.IDisposable"
  },
  "api/GameOverlay.Drawing.Graphics.html": {
    "href": "api/GameOverlay.Drawing.Graphics.html",
    "title": "Class Graphics | GameOverlay.Net Documentation",
    "keywords": "Class Graphics Encapsulates a Direct2D drawing surface. Inheritance Object Graphics Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class Graphics : IDisposable Constructors | Improve this Doc View Source Graphics() Initializes a new Graphics surface. Declaration public Graphics() | Improve this Doc View Source Graphics(IntPtr) Initializes a new Graphics surface using a window handle. Declaration public Graphics(IntPtr windowHandle) Parameters Type Name Description IntPtr windowHandle A handle to the window used as a surface. | Improve this Doc View Source Graphics(IntPtr, Int32, Int32) Initializes a new Graphics surface using a window handle and its width and height. Declaration public Graphics(IntPtr windowHandle, int width, int height) Parameters Type Name Description IntPtr windowHandle A handle to the window used as a surface. Int32 width A value indicating the width of the surface. Int32 height A value indicating the height of the surface. Properties | Improve this Doc View Source FPS Specifies the images per second in which this graphics device redraws. Declaration public int FPS { get; } Property Value Type Description Int32 | Improve this Doc View Source Height Gets or sets the width of this Graphics surface. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IsDrawing Indicates whether this Graphics surface is currently drawing on a Scene. Declaration public bool IsDrawing { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInitialized Indicates whether this Graphics surface is initialized. Declaration public bool IsInitialized { get; } Property Value Type Description Boolean | Improve this Doc View Source IsResizing Indicates whether this Graphics surface will change its size on the next Scene. Declaration public bool IsResizing { get; } Property Value Type Description Boolean | Improve this Doc View Source MeasureFPS Determines whether this Graphics device will measure the resulting frames per second. Declaration public bool MeasureFPS { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PerPrimitiveAntiAliasing Determines whether Anti-Aliasing for each primitive (Line, Rectangle, Circle, Geometry) is enabled. Declaration public bool PerPrimitiveAntiAliasing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TextAntiAliasing Determines whether Anti-Aliasing for Text is enabled. Declaration public bool TextAntiAliasing { get; set; } Property Value Type Description Boolean | Improve this Doc View Source UseMultiThreadedFactories Determines whether factories (Font, Geometry, Brush) will be used in a multi-threaded environment. Declaration public bool UseMultiThreadedFactories { get; set; } Property Value Type Description Boolean | Improve this Doc View Source VSync Determines whether this Graphics surface will be locked to the monitors refresh rate. Declaration public bool VSync { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Width Gets or sets the width of this Graphics surface. Declaration public int Width { get; set; } Property Value Type Description Int32 | Improve this Doc View Source WindowHandle Gets or sets the window handle of the Graphics surface. Declaration public IntPtr WindowHandle { get; set; } Property Value Type Description IntPtr Methods | Improve this Doc View Source BeginScene() Starts a new Scene (Frame). Declaration public void BeginScene() | Improve this Doc View Source ClearScene() Clears the current Scene (Frame) using a transparent background color. Declaration public void ClearScene() | Improve this Doc View Source ClearScene(Color) Clears the current Scene (Frame) using the given background color. Declaration public void ClearScene(Color color) Parameters Type Name Description Color color The background color of this Scene. | Improve this Doc View Source ClearScene(SolidBrush) Clears the current Scene (Frame) using the given brush. Declaration public void ClearScene(SolidBrush brush) Parameters Type Name Description SolidBrush brush The brush used to draw the background of this Scene. | Improve this Doc View Source ClipRegionEnd() Removes the last clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations. Declaration public void ClipRegionEnd() | Improve this Doc View Source ClipRegionStart(Rectangle) Specifies a rectangle to which all subsequent drawing operations are clipped. Declaration public void ClipRegionStart(Rectangle region) Parameters Type Name Description Rectangle region A Rectangle representing the size and position of the clipping area. | Improve this Doc View Source ClipRegionStart(Single, Single, Single, Single) Specifies a rectangle to which all subsequent drawing operations are clipped. Declaration public void ClipRegionStart(float left, float top, float right, float bottom) Parameters Type Name Description Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. | Improve this Doc View Source CreateFont(String, Single, Boolean, Boolean, Boolean) Creates a new Font by using the given font family, size and styles. Declaration public Font CreateFont(string fontFamilyName, float size, bool bold = false, bool italic = false, bool wordWrapping = false) Parameters Type Name Description String fontFamilyName The name of any installed font family. Single size A value indicating the size of a font in pixels. Boolean bold A Boolean determining whether this font is bold. Boolean italic A Boolean determining whether this font is italic. Boolean wordWrapping A Boolean determining whether this font uses word wrapping. Returns Type Description Font | Improve this Doc View Source CreateGeometry() Creates a new Geometry used to draw complex figures. Declaration public Geometry CreateGeometry() Returns Type Description Geometry The Geometry this method creates. | Improve this Doc View Source CreateImage(Byte[]) Creates a new Image by using the given bytes. Declaration public Image CreateImage(byte[] bytes) Parameters Type Name Description Byte [] bytes An image loaded into a byte array. Returns Type Description Image The Image this method creates. | Improve this Doc View Source CreateImage(String) Creates a new Image from an image file on the disk. Declaration public Image CreateImage(string path) Parameters Type Name Description String path The path to an image file. Returns Type Description Image The Image this method creates. | Improve this Doc View Source CreateSolidBrush(Color) Creates a new SolidBrush by using the given color structure. Declaration public SolidBrush CreateSolidBrush(Color color) Parameters Type Name Description Color color A value representing the ARGB components used to create a SolidBrush. Returns Type Description SolidBrush The SolidBrush this method creates. | Improve this Doc View Source CreateSolidBrush(Int32, Int32, Int32, Int32) Creates a new SolidBrush by using the given color components. Declaration public SolidBrush CreateSolidBrush(int r, int g, int b, int a = 255) Parameters Type Name Description Int32 r The red component value of this color. Int32 g The green component value of this color. Int32 b The blue component value of this color. Int32 a The alpha component value of this color. Returns Type Description SolidBrush The SolidBrush this method creates. | Improve this Doc View Source CreateSolidBrush(Single, Single, Single, Single) Creates a new SolidBrush by using the given color components. Declaration public SolidBrush CreateSolidBrush(float r, float g, float b, float a = 1F) Parameters Type Name Description Single r The red component value of this color. Single g The green component value of this color. Single b The blue component value of this color. Single a The alpha component value of this color. Returns Type Description SolidBrush The SolidBrush this method creates. | Improve this Doc View Source DashedCircle(IBrush, Circle, Single) Draws a circle with a dashed line by using the given brush and dimension. Declaration public void DashedCircle(IBrush brush, Circle circle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Circle circle A Circle structure which includes the dimension of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DashedCircle(IBrush, Point, Single, Single) Draws a circle with a dashed line by using the given brush and dimension. Declaration public void DashedCircle(IBrush brush, Point location, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Point location A Point structureure which includes the x- and y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DashedCircle(IBrush, Single, Single, Single, Single) Draws a circle with a dashed line by using the given brush and dimension. Declaration public void DashedCircle(IBrush brush, float x, float y, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Single x The x-coordinate of the center of the circle. Single y The y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DashedEllipse(IBrush, Ellipse, Single) Draws an ellipse with a dashed line by using the given brush and dimension. Declaration public void DashedEllipse(IBrush brush, Ellipse ellipse, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Ellipse ellipse An Ellipse structure which includes the dimension of the ellipse. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source DashedEllipse(IBrush, Point, Single, Single, Single) Draws an ellipse with a dashed line by using the given brush and dimension. Declaration public void DashedEllipse(IBrush brush, Point location, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Point location A Point structureure which includes the x- and y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source DashedEllipse(IBrush, Single, Single, Single, Single, Single) Draws an ellipse with a dashed line by using the given brush and dimension. Declaration public void DashedEllipse(IBrush brush, float x, float y, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Single x The x-coordinate of the center of the ellipse. Single y The y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source DashedGeometry(Geometry, IBrush, Single) Draws a Geometry with dashed lines using the given brush and thickness. Declaration public void DashedGeometry(Geometry geometry, IBrush brush, float stroke) Parameters Type Name Description Geometry geometry The Geometry to be drawn. IBrush brush A brush that determines the color of the text. Single stroke A value that determines the width/thickness of the lines. | Improve this Doc View Source DashedLine(IBrush, Line, Single) Draws a dashed line at the given start and end point. Declaration public void DashedLine(IBrush brush, Line line, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Line line A Line structure including the start and end Point of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedLine(IBrush, Point, Point, Single) Draws a dashed line at the given start and end point. Declaration public void DashedLine(IBrush brush, Point start, Point end, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Point start A Point structure including the start position of the line. Point end A Point structure including the end position of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedLine(IBrush, Single, Single, Single, Single, Single) Draws a dashed line at the given start and end point. Declaration public void DashedLine(IBrush brush, float startX, float startY, float endX, float endY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Single startX The start position of the line on the x-axis Single startY The start position of the line on the y-axis Single endX The end position of the line on the x-axis Single endY The end position of the line on the y-axis Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedRectangle(IBrush, Rectangle, Single) Draws a rectangle with dashed lines by using the given brush and dimension. Declaration public void DashedRectangle(IBrush brush, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure that determines the boundaries of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedRectangle(IBrush, Single, Single, Single, Single, Single) Draws a rectangle with dashed lines by using the given brush and dimension. Declaration public void DashedRectangle(IBrush brush, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedRoundedRectangle(IBrush, RoundedRectangle, Single) Draws a rectangle with rounded edges and dashed lines by using the given brush and dimension. Declaration public void DashedRoundedRectangle(IBrush brush, RoundedRectangle rectangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. RoundedRectangle rectangle A RoundedRectangle structure including the dimension of the rounded rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedRoundedRectangle(IBrush, Single, Single, Single, Single, Single, Single) Draws a rectangle with rounded edges and dashed lines by using the given brush and dimension. Declaration public void DashedRoundedRectangle(IBrush brush, float left, float top, float right, float bottom, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single radius A value that determines radius of corners. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedTriangle(IBrush, Point, Point, Point, Single) Draws a triangle with dashed lines using the given brush and dimension. Declaration public void DashedTriangle(IBrush brush, Point a, Point b, Point c, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Point a A Point structure including the coordinates of the lower-left corner of the triangle. Point b A Point structure including the coordinates of the lower-right corner of the triangle. Point c A Point structure including the coordinates of the upper-center corner of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedTriangle(IBrush, Triangle, Single) Draws a triangle with dashed lines using the given brush and dimension. Declaration public void DashedTriangle(IBrush brush, Triangle triangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Triangle triangle A Triangle structure including the dimension of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DashedTriangle(IBrush, Single, Single, Single, Single, Single, Single, Single) Draws a triangle with dashed lines using the given brush and dimension. Declaration public void DashedTriangle(IBrush brush, float aX, float aY, float bX, float bY, float cX, float cY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Single aX The x-coordinate lower-left corner of the triangle. Single aY The y-coordinate lower-left corner of the triangle. Single bX The x-coordinate lower-right corner of the triangle. Single bY The y-coordinate lower-right corner of the triangle. Single cX The x-coordinate upper-center corner of the triangle. Single cY The y-coordinate upper-center corner of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source Destroy() Destroys an already initialized Graphics surface and frees its resources. Declaration public void Destroy() | Improve this Doc View Source Dispose() Releases all resources used by this Graphics surface. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this Graphics surface. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source DrawArrowLine(IBrush, Line, Single) Draws a pointed line using the given brush and dimension. Declaration public void DrawArrowLine(IBrush brush, Line line, float size) Parameters Type Name Description IBrush brush A brush that determines the color of the arrow line. Line line A Line structure including the start (direction) and end point of the arrow line. Single size A value determining the size of the arrow line. | Improve this Doc View Source DrawArrowLine(IBrush, Point, Point, Single) Draws a pointed line using the given brush and dimension. Declaration public void DrawArrowLine(IBrush brush, Point start, Point end, float size) Parameters Type Name Description IBrush brush A brush that determines the color of the arrow line. Point start A Point structure including the start position of the arrow line. (the direction it points to) Point end A Point structure including the end position of the arrow line. (the direction it points to) Single size A value determining the size of the arrow line. | Improve this Doc View Source DrawArrowLine(IBrush, Single, Single, Single, Single, Single) Draws a pointed line using the given brush and dimension. Declaration public void DrawArrowLine(IBrush brush, float startX, float startY, float endX, float endY, float size) Parameters Type Name Description IBrush brush A brush that determines the color of the arrow line. Single startX The x-coordinate of the start of the arrow line. (the direction it points to) Single startY The y-coordinate of the start of the arrow line. (the direction it points to) Single endX The x-coordinate of the end of the arrow line. Single endY The y-coordinate of the end of the arrow line. Single size A value determining the size of the arrow line. | Improve this Doc View Source DrawBox2D(IBrush, IBrush, Rectangle, Single) Draws a 2D Box with an outline using the given brush and dimension. Declaration public void DrawBox2D(IBrush outline, IBrush fill, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawBox2D(IBrush, IBrush, Single, Single, Single, Single, Single) Draws a 2D Box with an outline using the given brush and dimension. Declaration public void DrawBox2D(IBrush outline, IBrush fill, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawCircle(IBrush, Circle, Single) Draws a circle using the given brush and dimension. Declaration public void DrawCircle(IBrush brush, Circle circle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Circle circle A Circle structure which includes the dimension of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawCircle(IBrush, Point, Single, Single) Draws a circle using the given brush and dimension. Declaration public void DrawCircle(IBrush brush, Point location, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Point location A Point structureure which includes the x- and y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawCircle(IBrush, Single, Single, Single, Single) Draws a circle using the given brush and dimension. Declaration public void DrawCircle(IBrush brush, float x, float y, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Single x The x-coordinate of the center of the circle. Single y The y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawCrosshair(IBrush, Point, Single, Single, CrosshairStyle) Draws a crosshair by using the given brush and style. Declaration public void DrawCrosshair(IBrush brush, Point location, float size, float stroke, CrosshairStyle style) Parameters Type Name Description IBrush brush A brush that determines the color of the crosshair. Point location A Location structure including the position of the crosshair. Single size The size of the crosshair in pixels. Single stroke A value that determines the width/thickness of the line. CrosshairStyle style A value that determines the appearance of the crosshair. | Improve this Doc View Source DrawCrosshair(IBrush, Single, Single, Single, Single, CrosshairStyle) Draws a crosshair by using the given brush and style. Declaration public void DrawCrosshair(IBrush brush, float x, float y, float size, float stroke, CrosshairStyle style) Parameters Type Name Description IBrush brush A brush that determines the color of the crosshair. Single x The x-coordinate of the center of the crosshair. Single y The y-coordinate of the center of the crosshair. Single size The size of the crosshair in pixels. Single stroke A value that determines the width/thickness of the line. CrosshairStyle style A value that determines the appearance of the crosshair. | Improve this Doc View Source DrawEllipse(IBrush, Ellipse, Single) Draws an ellipse by using the given brush and dimension. Declaration public void DrawEllipse(IBrush brush, Ellipse ellipse, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Ellipse ellipse An Ellipse structure which includes the dimension of the ellipse. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawEllipse(IBrush, Point, Single, Single, Single) Draws an ellipse by using the given brush and dimension. Declaration public void DrawEllipse(IBrush brush, Point location, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Point location A Point structureure which includes the x- and y-coordinate of the center of the ellipse. Single radiusX The radius of this ellipse on the x-axis. Single radiusY The radius of this ellipse on the y-axis. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawEllipse(IBrush, Single, Single, Single, Single, Single) Draws an ellipse by using the given brush and dimension. Declaration public void DrawEllipse(IBrush brush, float x, float y, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Single x The x-coordinate of the center of the ellipse. Single y The y-coordinate of the center of the ellipse. Single radiusX The radius of this ellipse on the x-axis. Single radiusY The radius of this ellipse on the y-axis. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source DrawGeometry(Geometry, IBrush, Single) Draws a Geometry using the given brush and thickness. Declaration public void DrawGeometry(Geometry geometry, IBrush brush, float stroke) Parameters Type Name Description Geometry geometry The Geometry to be drawn. IBrush brush A brush that determines the color of the text. Single stroke A value that determines the width/thickness of the lines. | Improve this Doc View Source DrawHorizontalProgressBar(IBrush, IBrush, Rectangle, Single, Single) Draws a horizontal progrss bar using the given brush, dimension and percentage value. Declaration public void DrawHorizontalProgressBar(IBrush outline, IBrush fill, Rectangle rectangle, float stroke, float percentage) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the progress bar. Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single stroke A value that determines the width/thickness of the line. Single percentage A value indicating the progress in percent. | Improve this Doc View Source DrawHorizontalProgressBar(IBrush, IBrush, Single, Single, Single, Single, Single, Single) Draws a horizontal progrss bar using the given brush, dimension and percentage value. Declaration public void DrawHorizontalProgressBar(IBrush outline, IBrush fill, float left, float top, float right, float bottom, float stroke, float percentage) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the progress bar. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. Single percentage A value indicating the progress in percent. | Improve this Doc View Source DrawImage(Image, Point, Single) Draws an image to the given position and optional applies an alpha value. Declaration public void DrawImage(Image image, Point location, float opacity = 1F) Parameters Type Name Description Image image The Image to be drawn. Point location A Point structure inclduing the position of the upper-left corner of the image. Single opacity A value indicating the opacity of the image. (alpha) | Improve this Doc View Source DrawImage(Image, Rectangle, Single, Boolean) Draws an image to the given position, scales it and optional applies an alpha value. Declaration public void DrawImage(Image image, Rectangle rectangle, float opacity = 1F, bool linearScale = true) Parameters Type Name Description Image image The Image to be drawn. Rectangle rectangle A Rectangle structure inclduing the dimension of the image. Single opacity A value indicating the opacity of the image. (alpha) Boolean linearScale A Boolean indicating whether linear scaling should be applied | Improve this Doc View Source DrawImage(Image, Single, Single, Single) Draws an image to the given position and optional applies an alpha value. Declaration public void DrawImage(Image image, float x, float y, float opacity = 1F) Parameters Type Name Description Image image The Image to be drawn. Single x The x-coordinate upper-left corner of the image. Single y The y-coordinate upper-left corner of the image. Single opacity A value indicating the opacity of the image. (alpha) | Improve this Doc View Source DrawImage(Image, Single, Single, Single, Single, Single, Boolean) Draws an image to the given position, scales it and optional applies an alpha value. Declaration public void DrawImage(Image image, float left, float top, float right, float bottom, float opacity = 1F, bool linearScale = true) Parameters Type Name Description Image image The Image to be drawn. Single left The x-coordinate of the upper-left corner of the image. Single top The y-coordinate of the upper-left corner of the image. Single right The x-coordinate of the lower-right corner of the image. Single bottom The y-coordinate of the lower-right corner of the image. Single opacity A value indicating the opacity of the image. (alpha) Boolean linearScale A Boolean indicating whether linear scaling should be applied | Improve this Doc View Source DrawLine(IBrush, Line, Single) Draws a line starting and ending at the given points. Declaration public void DrawLine(IBrush brush, Line line, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Line line A Line structure including the start and end Point of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawLine(IBrush, Point, Point, Single) Draws a line starting and ending at the given points. Declaration public void DrawLine(IBrush brush, Point start, Point end, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Point start A Point structure including the start position of the line. Point end A Point structure including the end position of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawLine(IBrush, Single, Single, Single, Single, Single) Draws a line starting and ending at the given points. Declaration public void DrawLine(IBrush brush, float startX, float startY, float endX, float endY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the line. Single startX The start position of the line on the x-axis Single startY The start position of the line on the y-axis Single endX The end position of the line on the x-axis Single endY The end position of the line on the y-axis Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRectangle(IBrush, Rectangle, Single) Draws a rectangle by using the given brush and dimension. Declaration public void DrawRectangle(IBrush brush, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure that determines the boundaries of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRectangle(IBrush, Single, Single, Single, Single, Single) Draws a rectangle by using the given brush and dimension. Declaration public void DrawRectangle(IBrush brush, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRectangleEdges(IBrush, Rectangle, Single) Draws the corners (edges) of a rectangle using the given brush and dimension. Declaration public void DrawRectangleEdges(IBrush brush, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRectangleEdges(IBrush, Single, Single, Single, Single, Single) Draws the corners (edges) of a rectangle using the given brush and dimension. Declaration public void DrawRectangleEdges(IBrush brush, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRoundedRectangle(IBrush, RoundedRectangle, Single) Draws a rectangle with rounded edges by using the given brush and dimension. Declaration public void DrawRoundedRectangle(IBrush brush, RoundedRectangle rectangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. RoundedRectangle rectangle A RoundedRectangle structure including the dimension of the rounded rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawRoundedRectangle(IBrush, Single, Single, Single, Single, Single, Single) Draws a rectangle with rounded edges by using the given brush and dimension. Declaration public void DrawRoundedRectangle(IBrush brush, float left, float top, float right, float bottom, float radius, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single radius A value that determines radius of corners. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawText(Font, IBrush, Point, String) Draws a string using the given font and position. Declaration public void DrawText(Font font, IBrush brush, Point location, string text) Parameters Type Name Description Font font The Font to be used to draw the string. IBrush brush A brush that determines the color of the text. Point location A Point structure including the starting position. String text The string to be drawn. | Improve this Doc View Source DrawText(Font, IBrush, Single, Single, String) Draws a string using the given font and position. Declaration public void DrawText(Font font, IBrush brush, float x, float y, string text) Parameters Type Name Description Font font The Font to be used to draw the string. IBrush brush A brush that determines the color of the text. Single x The x-coordinate of the starting position. Single y The y-coordinate of the starting position. String text The string to be drawn. | Improve this Doc View Source DrawText(Font, Single, IBrush, Point, String) Draws a string using the given font, size and position. Declaration public void DrawText(Font font, float fontSize, IBrush brush, Point location, string text) Parameters Type Name Description Font font The Font to be used to draw the string. Single fontSize The size of the Font. (does not need to be the same as in Font.FontSize) IBrush brush A brush that determines the color of the text. Point location A Point structure including the starting position. String text The string to be drawn. | Improve this Doc View Source DrawText(Font, Single, IBrush, Single, Single, String) Draws a string using the given font, size and position. Declaration public void DrawText(Font font, float fontSize, IBrush brush, float x, float y, string text) Parameters Type Name Description Font font The Font to be used to draw the string. Single fontSize The size of the Font. (does not need to be the same as in Font.FontSize) IBrush brush A brush that determines the color of the text. Single x The x-coordinate of the starting position. Single y The y-coordinate of the starting position. String text The string to be drawn. | Improve this Doc View Source DrawTextWithBackground(Font, IBrush, IBrush, Point, String) Draws a string with a background box in behind using the given font, size and position. Declaration public void DrawTextWithBackground(Font font, IBrush brush, IBrush background, Point location, string text) Parameters Type Name Description Font font The Font to be used to draw the string. IBrush brush A brush that determines the color of the text. IBrush background A brush that determines the color of the background box. Point location A Point structure including the starting position. String text The string to be drawn. | Improve this Doc View Source DrawTextWithBackground(Font, IBrush, IBrush, Single, Single, String) Draws a string with a background box in behind using the given font, size and position. Declaration public void DrawTextWithBackground(Font font, IBrush brush, IBrush background, float x, float y, string text) Parameters Type Name Description Font font The Font to be used to draw the string. IBrush brush A brush that determines the color of the text. IBrush background A brush that determines the color of the background box. Single x The x-coordinate of the starting position. Single y The y-coordinate of the starting position. String text The string to be drawn. | Improve this Doc View Source DrawTextWithBackground(Font, Single, IBrush, IBrush, Point, String) Draws a string with a background box in behind using the given font, size and position. Declaration public void DrawTextWithBackground(Font font, float fontSize, IBrush brush, IBrush background, Point location, string text) Parameters Type Name Description Font font The Font to be used to draw the string. Single fontSize The size of the Font. (does not need to be the same as in Font.FontSize) IBrush brush A brush that determines the color of the text. IBrush background A brush that determines the color of the background box. Point location A Point structure including the starting position. String text The string to be drawn. | Improve this Doc View Source DrawTextWithBackground(Font, Single, IBrush, IBrush, Single, Single, String) Draws a string with a background box in behind using the given font, size and position. Declaration public void DrawTextWithBackground(Font font, float fontSize, IBrush brush, IBrush background, float x, float y, string text) Parameters Type Name Description Font font The Font to be used to draw the string. Single fontSize The size of the Font. (does not need to be the same as in Font.FontSize) IBrush brush A brush that determines the color of the text. IBrush background A brush that determines the color of the background box. Single x The x-coordinate of the starting position. Single y The y-coordinate of the starting position. String text The string to be drawn. | Improve this Doc View Source DrawTriangle(IBrush, Point, Point, Point, Single) Draws a triangle using the given brush and dimension. Declaration public void DrawTriangle(IBrush brush, Point a, Point b, Point c, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Point a A Point structure including the coordinates of the lower-left corner of the triangle. Point b A Point structure including the coordinates of the lower-right corner of the triangle. Point c A Point structure including the coordinates of the upper-center corner of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawTriangle(IBrush, Triangle, Single) Draws a triangle using the given brush and dimension. Declaration public void DrawTriangle(IBrush brush, Triangle triangle, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Triangle triangle A Triangle structure including the dimension of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawTriangle(IBrush, Single, Single, Single, Single, Single, Single, Single) Draws a triangle using the given brush and dimension. Declaration public void DrawTriangle(IBrush brush, float aX, float aY, float bX, float bY, float cX, float cY, float stroke) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Single aX The x-coordinate lower-left corner of the triangle. Single aY The y-coordinate lower-left corner of the triangle. Single bX The x-coordinate lower-right corner of the triangle. Single bY The y-coordinate lower-right corner of the triangle. Single cX The x-coordinate upper-center corner of the triangle. Single cY The y-coordinate upper-center corner of the triangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source DrawVerticalProgressBar(IBrush, IBrush, Rectangle, Single, Single) Draws a vertical progrss bar using the given brush, dimension and percentage value. Declaration public void DrawVerticalProgressBar(IBrush outline, IBrush fill, Rectangle rectangle, float stroke, float percentage) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the progress bar. Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single stroke A value that determines the width/thickness of the line. Single percentage A value indicating the progress in percent. | Improve this Doc View Source DrawVerticalProgressBar(IBrush, IBrush, Single, Single, Single, Single, Single, Single) Draws a vertical progrss bar using the given brush, dimension and percentage value. Declaration public void DrawVerticalProgressBar(IBrush outline, IBrush fill, float left, float top, float right, float bottom, float stroke, float percentage) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the progress bar. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. Single percentage A value indicating the progress in percent. | Improve this Doc View Source EndScene() Ends the current Scene (Frame). Declaration public void EndScene() | Improve this Doc View Source Equals(Graphics) Returns a value indicating whether two specified instances of Graphics represent the same value. Declaration public bool Equals(Graphics value) Parameters Type Name Description Graphics value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Graphics, Graphics) Returns a value indicating whether two specified instances of Graphics represent the same value. Declaration public static bool Equals(Graphics left, Graphics right) Parameters Type Name Description Graphics left The first object to compare. Graphics right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Graphics and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source FillCircle(IBrush, Circle) Fills a circle by using the given brush and dimesnion. Declaration public void FillCircle(IBrush brush, Circle circle) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Circle circle A Circle structure which includes the dimension of the circle. | Improve this Doc View Source FillCircle(IBrush, Point, Single) Fills a circle by using the given brush and dimesnion. Declaration public void FillCircle(IBrush brush, Point location, float radius) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Point location A Point structureure which includes the x- and y-coordinate of the center of the circle. Single radius The radius of the circle. | Improve this Doc View Source FillCircle(IBrush, Single, Single, Single) Fills a circle by using the given brush and dimesnion. Declaration public void FillCircle(IBrush brush, float x, float y, float radius) Parameters Type Name Description IBrush brush A brush that determines the color of the circle. Single x The x-coordinate of the center of the circle. Single y The y-coordinate of the center of the circle. Single radius The radius of the circle. | Improve this Doc View Source FillEllipse(IBrush, Ellipse) Fills an ellipse by using the given brush and dimesnion. Declaration public void FillEllipse(IBrush brush, Ellipse ellipse) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Ellipse ellipse An Ellipse structure which includes the dimension of the ellipse. | Improve this Doc View Source FillEllipse(IBrush, Point, Single, Single) Fills an ellipse by using the given brush and dimesnion. Declaration public void FillEllipse(IBrush brush, Point location, float radiusX, float radiusY) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Point location A Point structureure which includes the x- and y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. | Improve this Doc View Source FillEllipse(IBrush, Single, Single, Single, Single) Fills an ellipse by using the given brush and dimesnion. Declaration public void FillEllipse(IBrush brush, float x, float y, float radiusX, float radiusY) Parameters Type Name Description IBrush brush A brush that determines the color of the ellipse. Single x The x-coordinate of the center of the ellipse. Single y The y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. | Improve this Doc View Source FillGeometry(Geometry, IBrush) Fills the Geometry using the given brush. Declaration public void FillGeometry(Geometry geometry, IBrush brush) Parameters Type Name Description Geometry geometry The Geometry to be drawn. IBrush brush A brush that determines the color of the text. | Improve this Doc View Source FillMesh(Mesh, IBrush) Fills the Mesh using the given brush. Declaration public void FillMesh(Mesh mesh, IBrush brush) Parameters Type Name Description SharpDX.Direct2D1.Mesh mesh The Mesh to be drawn. IBrush brush A brush that determines the color of the text. | Improve this Doc View Source FillRectangle(IBrush, Rectangle) Fills a rectangle by using the given brush and dimension. Declaration public void FillRectangle(IBrush brush, Rectangle rectangle) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure that determines the boundaries of the rectangle. | Improve this Doc View Source FillRectangle(IBrush, Single, Single, Single, Single) Fills a rectangle by using the given brush and dimension. Declaration public void FillRectangle(IBrush brush, float left, float top, float right, float bottom) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. | Improve this Doc View Source FillRoundedRectangle(IBrush, RoundedRectangle) Fills a rounded rectangle using the given brush and dimension. Declaration public void FillRoundedRectangle(IBrush brush, RoundedRectangle rectangle) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. RoundedRectangle rectangle A RoundedRectangle structure including the dimension of the rounded rectangle. | Improve this Doc View Source FillRoundedRectangle(IBrush, Single, Single, Single, Single, Single) Fills a rounded rectangle using the given brush and dimension. Declaration public void FillRoundedRectangle(IBrush brush, float left, float top, float right, float bottom, float radius) Parameters Type Name Description IBrush brush A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single radius A value that determines radius of corners. | Improve this Doc View Source FillTriangle(IBrush, Point, Point, Point) Fills a triangle using the given brush and dimension. Declaration public void FillTriangle(IBrush brush, Point a, Point b, Point c) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Point a A Point structure including the coordinates of the lower-left corner of the triangle. Point b A Point structure including the coordinates of the lower-right corner of the triangle. Point c A Point structure including the coordinates of the upper-center corner of the triangle. | Improve this Doc View Source FillTriangle(IBrush, Triangle) Fills a triangle using the given brush and dimension. Declaration public void FillTriangle(IBrush brush, Triangle triangle) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Triangle triangle A Triangle structure including the dimension of the triangle. | Improve this Doc View Source FillTriangle(IBrush, Single, Single, Single, Single, Single, Single) Fills a triangle using the given brush and dimension. Declaration public void FillTriangle(IBrush brush, float aX, float aY, float bX, float bY, float cX, float cY) Parameters Type Name Description IBrush brush A brush that determines the color of the triangle. Single aX The x-coordinate lower-left corner of the triangle. Single aY The y-coordinate lower-left corner of the triangle. Single bX The x-coordinate lower-right corner of the triangle. Single bY The y-coordinate lower-right corner of the triangle. Single cX The x-coordinate upper-center corner of the triangle. Single cY The y-coordinate upper-center corner of the triangle. | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetFactory() Gets the Factory used by this Graphics surface. Declaration public Factory GetFactory() Returns Type Description SharpDX.Direct2D1.Factory The Factory of this Graphics surface. | Improve this Doc View Source GetFontFactory() Gets the FontFactory used by this Graphics surface. Declaration public Factory GetFontFactory() Returns Type Description SharpDX.DirectWrite.Factory The FontFactory of this Graphics surface. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source GetRenderTarget() Gets the RenderTarget used by this Graphics surface. Declaration public RenderTarget GetRenderTarget() Returns Type Description SharpDX.Direct2D1.RenderTarget The RenderTarget of this Graphics surface. | Improve this Doc View Source MeasureString(Font, Single, String) Measures the specified string when drawn with the specified Font. Declaration public Point MeasureString(Font font, float fontSize, string text) Parameters Type Name Description Font font Font that defines the text format of the string. Single fontSize The size of the Font. (does not need to be the same as in Font.FontSize) String text String to measure. Returns Type Description Point This method returns a Point containing the width (x) and height (y) of the given text. | Improve this Doc View Source MeasureString(Font, String) Measures the specified string when drawn with the specified Font. Declaration public Point MeasureString(Font font, string text) Parameters Type Name Description Font font Font that defines the text format of the string. String text String to measure. Returns Type Description Point This method returns a Point containing the width (x) and height (y) of the given text. | Improve this Doc View Source OutlineCircle(IBrush, IBrush, Circle, Single) Draws a circle with an outline around it using the given brush and dimension. Declaration public void OutlineCircle(IBrush outline, IBrush fill, Circle circle, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Circle circle A Circle structure which includes the dimension of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineCircle(IBrush, IBrush, Point, Single, Single) Draws a circle with an outline around it using the given brush and dimension. Declaration public void OutlineCircle(IBrush outline, IBrush fill, Point location, float radius, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Point location A Point structureure which includes the x- and y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineCircle(IBrush, IBrush, Single, Single, Single, Single) Draws a circle with an outline around it using the given brush and dimension. Declaration public void OutlineCircle(IBrush outline, IBrush fill, float x, float y, float radius, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Single x The x-coordinate of the center of the circle. Single y The y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineEllipse(IBrush, IBrush, Ellipse, Single) Draws an ellipse with an outline around it using the given brush and dimension. Declaration public void OutlineEllipse(IBrush outline, IBrush fill, Ellipse ellipse, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Ellipse ellipse An Ellipse structure which includes the dimension of the ellipse. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineEllipse(IBrush, IBrush, Point, Single, Single, Single) Draws an ellipse with an outline around it using the given brush and dimension. Declaration public void OutlineEllipse(IBrush outline, IBrush fill, Point location, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Point location A Point structureure which includes the x- and y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineEllipse(IBrush, IBrush, Single, Single, Single, Single, Single) Draws an ellipse with an outline around it using the given brush and dimension. Declaration public void OutlineEllipse(IBrush outline, IBrush fill, float x, float y, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Single x The x-coordinate of the center of the ellipse. Single y The y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineFillCircle(IBrush, IBrush, Circle, Single) Draws a filled circle with an outline around it. Declaration public void OutlineFillCircle(IBrush outline, IBrush fill, Circle circle, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Circle circle A Circle structure which includes the dimension of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineFillCircle(IBrush, IBrush, Point, Single, Single) Draws a filled circle with an outline around it. Declaration public void OutlineFillCircle(IBrush outline, IBrush fill, Point location, float radius, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Point location A Point structureure which includes the x- and y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineFillCircle(IBrush, IBrush, Single, Single, Single, Single) Draws a filled circle with an outline around it. Declaration public void OutlineFillCircle(IBrush outline, IBrush fill, float x, float y, float radius, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the circle. Single x The x-coordinate of the center of the circle. Single y The y-coordinate of the center of the circle. Single radius The radius of the circle. Single stroke A value that determines the width/thickness of the circle. | Improve this Doc View Source OutlineFillEllipse(IBrush, IBrush, Ellipse, Single) Draws a filled ellipse with an outline around it. Declaration public void OutlineFillEllipse(IBrush outline, IBrush fill, Ellipse ellipse, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Ellipse ellipse An Ellipse structure which includes the dimension of the ellipse. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineFillEllipse(IBrush, IBrush, Point, Single, Single, Single) Draws a filled ellipse with an outline around it. Declaration public void OutlineFillEllipse(IBrush outline, IBrush fill, Point location, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Point location A Point structureure which includes the x- and y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineFillEllipse(IBrush, IBrush, Single, Single, Single, Single, Single) Draws a filled ellipse with an outline around it. Declaration public void OutlineFillEllipse(IBrush outline, IBrush fill, float x, float y, float radiusX, float radiusY, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the ellipse. Single x The x-coordinate of the center of the ellipse. Single y The y-coordinate of the center of the ellipse. Single radiusX The radius of the ellipse on the x-axis. Single radiusY The radius of the ellipse on the y-axis. Single stroke A value that determines the width/thickness of the ellipse. | Improve this Doc View Source OutlineFillRectangle(IBrush, IBrush, Rectangle, Single) Draws a filled rectangle with an outline around it by using the given brush and dimension. Declaration public void OutlineFillRectangle(IBrush outline, IBrush fill, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure that determines the boundaries of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineFillRectangle(IBrush, IBrush, Single, Single, Single, Single, Single) Draws a filled rectangle with an outline around it by using the given brush and dimension. Declaration public void OutlineFillRectangle(IBrush outline, IBrush fill, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineLine(IBrush, IBrush, Line, Single) Draws a line at the given start and end point with an outline around it. Declaration public void OutlineLine(IBrush outline, IBrush fill, Line line, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the line. Line line A Line structure including the start and end Point of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineLine(IBrush, IBrush, Point, Point, Single) Draws a line at the given start and end point with an outline around it. Declaration public void OutlineLine(IBrush outline, IBrush fill, Point start, Point end, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the line. Point start A Point structure including the start position of the line. Point end A Point structure including the end position of the line. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineLine(IBrush, IBrush, Single, Single, Single, Single, Single) Draws a line at the given start and end point with an outline around it. Declaration public void OutlineLine(IBrush outline, IBrush fill, float startX, float startY, float endX, float endY, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the line. Single startX The start position of the line on the x-axis Single startY The start position of the line on the y-axis Single endX The end position of the line on the x-axis Single endY The end position of the line on the y-axis Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineRectangle(IBrush, IBrush, Rectangle, Single) Draws a rectangle with an outline around it by using the given brush and dimension. Declaration public void OutlineRectangle(IBrush outline, IBrush fill, Rectangle rectangle, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Rectangle rectangle A Rectangle structure that determines the boundaries of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source OutlineRectangle(IBrush, IBrush, Single, Single, Single, Single, Single) Draws a rectangle with an outline around it by using the given brush and dimension. Declaration public void OutlineRectangle(IBrush outline, IBrush fill, float left, float top, float right, float bottom, float stroke) Parameters Type Name Description IBrush outline A brush that determines the color of the outline. IBrush fill A brush that determines the color of the rectangle. Single left The x-coordinate of the upper-left corner of the rectangle. Single top The y-coordinate of the upper-left corner of the rectangle. Single right The x-coordinate of the lower-right corner of the rectangle. Single bottom The y-coordinate of the lower-right corner of the rectangle. Single stroke A value that determines the width/thickness of the line. | Improve this Doc View Source Recreate(IntPtr) Destroys the current drawing device and creates a new one with the same attributes. Declaration public void Recreate(IntPtr hwnd = default(IntPtr)) Parameters Type Name Description IntPtr hwnd Uses the new window as the surface if set. | Improve this Doc View Source Resize(Int32, Int32) Tells the Graphics surface to resize itself on the next Scene. Declaration public void Resize(int width, int height) Parameters Type Name Description Int32 width A value Determining the new width of this Graphics surface. Int32 height A value Determining the new height of this Graphics surface. | Improve this Doc View Source Setup() Sets up and finishes the initialization of this Graphics surface by using this objects properties. Declaration public void Setup() | Improve this Doc View Source ToString() Converts this Graphics instance to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Graphics. Overrides Object.ToString() | Improve this Doc View Source TransformEnd() Removes the transformation matrix. it does not change the position, shape, or size of any drawing operations anymore. Declaration public void TransformEnd() | Improve this Doc View Source TransformStart(TransformationMatrix) Specifies a matrix to which all subsequent drawing operations are transformed. Declaration public void TransformStart(TransformationMatrix matrix) Parameters Type Name Description TransformationMatrix matrix The matrix used for the transformation. | Improve this Doc View Source UseScene() Creates a new Scene which handles BeginScene and EndScene within a using block. Declaration public Scene UseScene() Returns Type Description Scene The Scene this method creates. Events | Improve this Doc View Source RecreateResources Fires when the device gets recreated. Brushes and images need to be created again since the device has changed. Declaration public event EventHandler<RecreateResourcesEventArgs> RecreateResources Event Type Type Description EventHandler < RecreateResourcesEventArgs > Implements System.IDisposable"
  },
  "api/GameOverlay.Drawing.html": {
    "href": "api/GameOverlay.Drawing.html",
    "title": "Namespace GameOverlay.Drawing | GameOverlay.Net Documentation",
    "keywords": "Namespace GameOverlay.Drawing Classes Font Defines a particular format for text, including font family name, size, and style attributes. Geometry Represents a Geometry which can be drawn by a Graphics device. Graphics Encapsulates a Direct2D drawing surface. Image Represents an Image which can be drawn using a Graphics surface. LinearGradientBrush Represents a linear gradient brush used with a Graphics surface. RecreateResourcesEventArgs Provides data for the RecreateResources event. Scene Represents a Scene / frame of a Graphics surface. SolidBrush Represents a SolidBrush which is used for drawing on a Graphics surface. Structs Circle Represents the dimension of a circle. Color Represents an ARGB (alpha, red, green, blue) Color. Ellipse Represents the dimension of an ellipse. Line Represents the start and end Point of a line. Point Represents the x- and y-coordinates of a point. Rectangle Represents the dimension of a rectangle. RoundedRectangle Represents the dimension of a rectangle with rounded edges. TransformationMatrix Represents a 3x2 matrix which is used to apply transformations on a render target and geometry. Triangle Represents the dimension of a triangle. Interfaces IBrush Represents a Brush used to draw with a Graphics surface. Enums CrosshairStyle Offers different built-in styles for crosshairs"
  },
  "api/GameOverlay.Drawing.IBrush.html": {
    "href": "api/GameOverlay.Drawing.IBrush.html",
    "title": "Interface IBrush | GameOverlay.Net Documentation",
    "keywords": "Interface IBrush Represents a Brush used to draw with a Graphics surface. Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public interface IBrush Properties | Improve this Doc View Source Brush Gets or sets the Brush Declaration Brush Brush { get; set; } Property Value Type Description SharpDX.Direct2D1.Brush"
  },
  "api/GameOverlay.Drawing.Image.html": {
    "href": "api/GameOverlay.Drawing.Image.html",
    "title": "Class Image | GameOverlay.Net Documentation",
    "keywords": "Class Image Represents an Image which can be drawn using a Graphics surface. Inheritance Object Image Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class Image : IDisposable Constructors | Improve this Doc View Source Image(Graphics, Byte[]) Initializes a new Image for the given device by using a byte[]. Declaration public Image(Graphics device, byte[] bytes) Parameters Type Name Description Graphics device The Graphics device. Byte [] bytes A byte[] containing image data. | Improve this Doc View Source Image(Graphics, String) Initializes a new Image for the given device by using a file on disk. Declaration public Image(Graphics device, string path) Parameters Type Name Description Graphics device The Graphics device. String path The path to an image file on disk. | Improve this Doc View Source Image(RenderTarget, Byte[]) Initializes a new Image for the given device by using a byte[]. Declaration public Image(RenderTarget device, byte[] bytes) Parameters Type Name Description SharpDX.Direct2D1.RenderTarget device The Graphics device. Byte [] bytes A byte[] containing image data. | Improve this Doc View Source Image(RenderTarget, String) Initializes a new Image for the given device by using a file on disk. Declaration public Image(RenderTarget device, string path) Parameters Type Name Description SharpDX.Direct2D1.RenderTarget device The Graphics device. String path The path to an image file on disk. Fields | Improve this Doc View Source Bitmap The SharpDX Bitmap Declaration public Bitmap Bitmap Field Value Type Description SharpDX.Direct2D1.Bitmap Properties | Improve this Doc View Source Height Gets the height of this Image Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source Width Gets the width of this Image Declaration public float Width { get; } Property Value Type Description Single Methods | Improve this Doc View Source Dispose() Releases all resources used by this Image. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this Image. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(Image) Returns a value indicating whether two specified instances of Image represent the same value. Declaration public bool Equals(Image value) Parameters Type Name Description Image value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Image, Image) Returns a value indicating whether two specified instances of Image represent the same value. Declaration public static bool Equals(Image left, Image right) Parameters Type Name Description Image left The first object to compare. Image right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Image and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts this Image instance to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Image. Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Image to Bitmap) Converts an Image to a SharpDX Bitmap. Declaration public static implicit operator Bitmap(Image image) Parameters Type Name Description Image image The Image object. Returns Type Description SharpDX.Direct2D1.Bitmap Implements System.IDisposable"
  },
  "api/GameOverlay.Drawing.Line.html": {
    "href": "api/GameOverlay.Drawing.Line.html",
    "title": "Struct Line | GameOverlay.Net Documentation",
    "keywords": "Struct Line Represents the start and end Point of a line. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Line Constructors | Improve this Doc View Source Line(Point, Point) Initializes a new Line using the given points. Declaration public Line(Point start, Point end) Parameters Type Name Description Point start A Point structure including the start coordinates of the line. Point end A Point structure including the end coordinates of the line. | Improve this Doc View Source Line(Int32, Int32, Int32, Int32) Initializes a new Line using the given points. Declaration public Line(int startX, int startY, int endX, int endY) Parameters Type Name Description Int32 startX The x-coordinate of the start point of the line. Int32 startY The y-coordinate of the start point of the line. Int32 endX The x-coordinate of the end point of the line. Int32 endY The y-coordinate of the end point of the line. | Improve this Doc View Source Line(Single, Single, Single, Single) Initializes a new Line using the given points. Declaration public Line(float startX, float startY, float endX, float endY) Parameters Type Name Description Single startX The x-coordinate of the start point of the line. Single startY The y-coordinate of the start point of the line. Single endX The x-coordinate of the end point of the line. Single endY The y-coordinate of the end point of the line. Fields | Improve this Doc View Source End The ending Point of this Line. Declaration public Point End Field Value Type Description Point | Improve this Doc View Source Start The staring Point of this Line. Declaration public Point Start Field Value Type Description Point Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Line and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts the Line structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Line. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Line, Line) Determines whether two specified instances are equal. Declaration public static bool operator ==(Line left, Line right) Parameters Type Name Description Line left The first object to compare. Line right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Inequality(Line, Line) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Line left, Line right) Parameters Type Name Description Line left The first object to compare. Line right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.LinearGradientBrush.html": {
    "href": "api/GameOverlay.Drawing.LinearGradientBrush.html",
    "title": "Class LinearGradientBrush | GameOverlay.Net Documentation",
    "keywords": "Class LinearGradientBrush Represents a linear gradient brush used with a Graphics surface. Inheritance Object LinearGradientBrush Implements IDisposable IBrush Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class LinearGradientBrush : IDisposable, IBrush Constructors | Improve this Doc View Source LinearGradientBrush(Graphics, Color[]) Initializes a new LinearGradientBrush using the target device and an Color[]. Declaration public LinearGradientBrush(Graphics device, params Color[] colors) Parameters Type Name Description Graphics device The Graphics device. Color [] colors The colors | Improve this Doc View Source LinearGradientBrush(RenderTarget, Color[]) Initializes a new LinearGradientBrush using the target device and an Color[]. Declaration public LinearGradientBrush(RenderTarget device, params Color[] colors) Parameters Type Name Description SharpDX.Direct2D1.RenderTarget device The Graphics device. Color [] colors The colors Properties | Improve this Doc View Source Brush Gets or sets the underlying Brush. Declaration public Brush Brush { get; set; } Property Value Type Description SharpDX.Direct2D1.Brush | Improve this Doc View Source End Gets or sets the end point of this LineatGradientBrush. Declaration public Point End { get; set; } Property Value Type Description Point | Improve this Doc View Source Start Gets or sets the start point of this LineatGradientBrush. Declaration public Point Start { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source Dispose() Releases all resources used by this LinearGradientBrush. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this LinearGradientBrush. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(LinearGradientBrush) Returns a value indicating whether two specified instances of LinearGradientBrush represent the same value. Declaration public bool Equals(LinearGradientBrush value) Parameters Type Name Description LinearGradientBrush value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(LinearGradientBrush, LinearGradientBrush) Returns a value indicating whether two specified instances of LinearGradientBrush represent the same value. Declaration public static bool Equals(LinearGradientBrush left, LinearGradientBrush right) Parameters Type Name Description LinearGradientBrush left The first object to compare. LinearGradientBrush right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a LinearGradientBrush and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source SetRange(Point, Point) Sets the range where the gradient gets applied. Declaration public void SetRange(Point start, Point end) Parameters Type Name Description Point start A Point structure inclduing the coordinates for the start point of this LinearGradientBrush. Point end A Point structure inclduing the coordinates for the end point of this LinearGradientBrush. | Improve this Doc View Source SetRange(Single, Single, Single, Single) Sets the range where the gradient gets applied. Declaration public void SetRange(float startX, float startY, float endX, float endY) Parameters Type Name Description Single startX The x-coordinate of the start point of this LinearGradientBrush. Single startY The y-coordinate of the start point of this LinearGradientBrush. Single endX The x-coordinate of the end point of this LinearGradientBrush. Single endY The y-coordinate of the end point of this LinearGradientBrush. | Improve this Doc View Source ToString() Converts this LinearGradientBrush instance to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this LinearGradientBrush. Overrides Object.ToString() Implements System.IDisposable IBrush"
  },
  "api/GameOverlay.Drawing.Point.html": {
    "href": "api/GameOverlay.Drawing.Point.html",
    "title": "Struct Point | GameOverlay.Net Documentation",
    "keywords": "Struct Point Represents the x- and y-coordinates of a point. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Point Constructors | Improve this Doc View Source Point(Int32, Int32) Initializes a new Point using the given coordinates. Declaration public Point(int x, int y) Parameters Type Name Description Int32 x The x-coordinate of this Point. Int32 y The y-coordinate of this Point. | Improve this Doc View Source Point(Single, Single) Initializes a new Point using the given coordinates. Declaration public Point(float x, float y) Parameters Type Name Description Single x The x-coordinate of this Point. Single y The y-coordinate of this Point. Fields | Improve this Doc View Source X The x-coordinate of this Point. Declaration public float X Field Value Type Description Single | Improve this Doc View Source Y The y-coordinate of this Point. Declaration public float Y Field Value Type Description Single Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Point and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts the Point structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Point. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Point, Point) Determines whether two specified instances are equal. Declaration public static bool operator ==(Point left, Point right) Parameters Type Name Description Point left The first object to compare. Point right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(Point to RawVector2) Converts a Point structure to a SharpDX RawVector2. Declaration public static implicit operator RawVector2(Point point) Parameters Type Name Description Point point A Point structure. Returns Type Description SharpDX.Mathematics.Interop.RawVector2 | Improve this Doc View Source Implicit(RawVector2 to Point) Converts a SharpDX RawVector2 structure to a Point structure. Declaration public static implicit operator Point(RawVector2 vector) Parameters Type Name Description SharpDX.Mathematics.Interop.RawVector2 vector A SharpDX RawVector2. Returns Type Description Point | Improve this Doc View Source Inequality(Point, Point) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Point left, Point right) Parameters Type Name Description Point left The first object to compare. Point right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.RecreateResourcesEventArgs.html": {
    "href": "api/GameOverlay.Drawing.RecreateResourcesEventArgs.html",
    "title": "Class RecreateResourcesEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class RecreateResourcesEventArgs Provides data for the RecreateResources event. Inheritance Object EventArgs RecreateResourcesEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class RecreateResourcesEventArgs : EventArgs Constructors | Improve this Doc View Source RecreateResourcesEventArgs(Graphics) Initializes a new RecreateResourcesEventArgs using the given graphics object. Declaration public RecreateResourcesEventArgs(Graphics graphics) Parameters Type Name Description Graphics graphics Properties | Improve this Doc View Source Graphics Gets the Graphics object associated with this event. Declaration public Graphics Graphics { get; } Property Value Type Description Graphics"
  },
  "api/GameOverlay.Drawing.Rectangle.html": {
    "href": "api/GameOverlay.Drawing.Rectangle.html",
    "title": "Struct Rectangle | GameOverlay.Net Documentation",
    "keywords": "Struct Rectangle Represents the dimension of a rectangle. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Rectangle Constructors | Improve this Doc View Source Rectangle(Int32, Int32, Int32, Int32) Initializes a new Rectangle using the given coordinates. Declaration public Rectangle(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left The x-coordinate of the upper-left corner of the Rectangle. Int32 top The y-coordinate of the upper-left corner of the Rectangle. Int32 right The x-coordinate of the bottom-right corner of the Rectangle. Int32 bottom The y-coordinate of the bottom-right corner of the Rectangle. | Improve this Doc View Source Rectangle(Single, Single, Single, Single) Initializes a new Rectangle using the given coordinates. Declaration public Rectangle(float left, float top, float right, float bottom) Parameters Type Name Description Single left The x-coordinate of the upper-left corner of the Rectangle. Single top The y-coordinate of the upper-left corner of the Rectangle. Single right The x-coordinate of the bottom-right corner of the Rectangle. Single bottom The y-coordinate of the bottom-right corner of the Rectangle. Fields | Improve this Doc View Source Bottom The y-coordinate of the bottom-right corner of the Rectangle. Declaration public float Bottom Field Value Type Description Single | Improve this Doc View Source Left The x-coordinate of the upper-left corner of the Rectangle. Declaration public float Left Field Value Type Description Single | Improve this Doc View Source Right The x-coordinate of the bottom-right corner of the Rectangle. Declaration public float Right Field Value Type Description Single | Improve this Doc View Source Top The y-coordinate of the upper-left corner of the Rectangle. Declaration public float Top Field Value Type Description Single Properties | Improve this Doc View Source Height Gets the height of this Rectangle. Declaration public float Height { get; } Property Value Type Description Single | Improve this Doc View Source Width Gets the width of this Rectangle. Declaration public float Width { get; } Property Value Type Description Single Methods | Improve this Doc View Source Create(Int32, Int32, Int32, Int32) Creates a new Rectangle structure using the given dimension. Declaration public static Rectangle Create(int x, int y, int width, int height) Parameters Type Name Description Int32 x The x-coordinate of the upper-left corner of the Rectangle. Int32 y The y-coordinate of the upper-left corner of the Rectangle. Int32 width The width of the rectangle. Int32 height The height of the rectangle Returns Type Description Rectangle The Rectangle this method creates. | Improve this Doc View Source Create(Single, Single, Single, Single) Creates a new Rectangle structure using the given dimension. Declaration public static Rectangle Create(float x, float y, float width, float height) Parameters Type Name Description Single x The x-coordinate of the upper-left corner of the Rectangle. Single y The y-coordinate of the upper-left corner of the Rectangle. Single width The width of the rectangle. Single height The height of the rectangle Returns Type Description Rectangle The Rectangle this method creates. | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Rectangle and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts this Rectangle structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Rectangle. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Rectangle, Rectangle) Determines whether two specified instances are equal. Declaration public static bool operator ==(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The first object to compare. Rectangle right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(Rectangle to RawRectangleF) Converts a Rectangle structure to a SharpDX RawRectangleF. Declaration public static implicit operator RawRectangleF(Rectangle rectangle) Parameters Type Name Description Rectangle rectangle A Rectangle structure. Returns Type Description SharpDX.Mathematics.Interop.RawRectangleF | Improve this Doc View Source Inequality(Rectangle, Rectangle) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Rectangle left, Rectangle right) Parameters Type Name Description Rectangle left The first object to compare. Rectangle right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.RoundedRectangle.html": {
    "href": "api/GameOverlay.Drawing.RoundedRectangle.html",
    "title": "Struct RoundedRectangle | GameOverlay.Net Documentation",
    "keywords": "Struct RoundedRectangle Represents the dimension of a rectangle with rounded edges. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct RoundedRectangle Constructors | Improve this Doc View Source RoundedRectangle(Rectangle, Single) Initializes a new RoundedRectangle structure using then given dimension and radius. Declaration public RoundedRectangle(Rectangle rectangle, float radius) Parameters Type Name Description Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single radius A value indicating the radius of the corners of a RoundedRectangle. | Improve this Doc View Source RoundedRectangle(Rectangle, Single, Single) Initializes a new RoundedRectangle structure using then given dimension and radius. Declaration public RoundedRectangle(Rectangle rectangle, float radiusX, float radiusY) Parameters Type Name Description Rectangle rectangle A Rectangle structure including the dimension of the rectangle. Single radiusX A value indicating the radius on the x-axis of the corners of a RoundedRectangle. Single radiusY A value indicating the radius on the y-axis of the corners of a RoundedRectangle. | Improve this Doc View Source RoundedRectangle(Single, Single, Single, Single, Single) Initializes a new RoundedRectangle structure using then given dimension and radius. Declaration public RoundedRectangle(float left, float top, float right, float bottom, float radius) Parameters Type Name Description Single left The x-coordinate of the upper-left corner of the Rectangle. Single top The y-coordinate of the upper-left corner of the Rectangle. Single right The x-coordinate of the bottom-right corner of the Rectangle. Single bottom The y-coordinate of the bottom-right corner of the Rectangle. Single radius A value indicating the radius of the corners of a RoundedRectangle. | Improve this Doc View Source RoundedRectangle(Single, Single, Single, Single, Single, Single) Initializes a new RoundedRectangle structure using then given dimension and radius. Declaration public RoundedRectangle(float left, float top, float right, float bottom, float radiusX, float radiusY) Parameters Type Name Description Single left The x-coordinate of the upper-left corner of the Rectangle. Single top The y-coordinate of the upper-left corner of the Rectangle. Single right The x-coordinate of the bottom-right corner of the Rectangle. Single bottom The y-coordinate of the bottom-right corner of the Rectangle. Single radiusX A value indicating the radius on the x-axis of the corners of a RoundedRectangle. Single radiusY A value indicating the radius on the y-axis of the corners of a RoundedRectangle. Fields | Improve this Doc View Source RadiusX The radius on the x-axis of this RoundedRectangle. Declaration public float RadiusX Field Value Type Description Single | Improve this Doc View Source RadiusY The radius on the y-axis of this RoundedRectangle. Declaration public float RadiusY Field Value Type Description Single | Improve this Doc View Source Rectangle The Rectangle. Declaration public Rectangle Rectangle Field Value Type Description Rectangle Methods | Improve this Doc View Source Create(Single, Single, Single, Single, Single) Creates a new RoundedRectangle using the given dimension and radius. Declaration public static RoundedRectangle Create(float x, float y, float width, float height, float radius) Parameters Type Name Description Single x The x-coordinate of the upper-left corner of the Rectangle. Single y The y-coordinate of the upper-left corner of the Rectangle. Single width The width of the Rectangle. Single height The height of the Rectangle. Single radius A value indicating the radius of the corners of a RoundedRectangle. Returns Type Description RoundedRectangle The RoundedRectangle this method creates. | Improve this Doc View Source Create(Single, Single, Single, Single, Single, Single) Creates a new RoundedRectangle using the given dimension and radius. Declaration public static RoundedRectangle Create(float x, float y, float width, float height, float radiusX, float radiusY) Parameters Type Name Description Single x The x-coordinate of the upper-left corner of the Rectangle. Single y The y-coordinate of the upper-left corner of the Rectangle. Single width The width of the Rectangle. Single height The height of the Rectangle. Single radiusX A value indicating the radius on the x-axis of the corners of a RoundedRectangle. Single radiusY A value indicating the radius on the y-axis of the corners of a RoundedRectangle. Returns Type Description RoundedRectangle The RoundedRectangle this method creates. | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a RoundedRectangle and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts this RoundedRectangle structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this RoundedRectangle Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(RoundedRectangle, RoundedRectangle) Determines whether two specified instances are equal. Declaration public static bool operator ==(RoundedRectangle left, RoundedRectangle right) Parameters Type Name Description RoundedRectangle left The first object to compare. RoundedRectangle right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Implicit(RoundedRectangle to RoundedRectangle) Converts a RoundedRectangle structure to a SharpDX RoundedRectangle. Declaration public static implicit operator RoundedRectangle(RoundedRectangle rectangle) Parameters Type Name Description RoundedRectangle rectangle A RoundedRectangle struct Returns Type Description SharpDX.Direct2D1.RoundedRectangle | Improve this Doc View Source Inequality(RoundedRectangle, RoundedRectangle) Determines whether two specified instances are not equal. Declaration public static bool operator !=(RoundedRectangle left, RoundedRectangle right) Parameters Type Name Description RoundedRectangle left The first object to compare. RoundedRectangle right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Drawing.Scene.html": {
    "href": "api/GameOverlay.Drawing.Scene.html",
    "title": "Class Scene | GameOverlay.Net Documentation",
    "keywords": "Class Scene Represents a Scene / frame of a Graphics surface. Inheritance Object Scene Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class Scene : IDisposable Constructors | Improve this Doc View Source Scene(Graphics) Initializes a new Scene using a Graphics surface Declaration public Scene(Graphics device) Parameters Type Name Description Graphics device A Graphics surface Properties | Improve this Doc View Source Device The Graphics surface. Declaration public Graphics Device { get; } Property Value Type Description Graphics Methods | Improve this Doc View Source Dispose() Releases all resources used by this Scene. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this Scene. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(Scene) Returns a value indicating whether two specified instances of Scene represent the same value. Declaration public bool Equals(Scene value) Parameters Type Name Description Scene value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Scene, Scene) Returns a value indicating whether two specified instances of Scene represent the same value. Declaration public static bool Equals(Scene left, Scene right) Parameters Type Name Description Scene left The first object to compare. Scene right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Scene and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts this Scene to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this Scene. Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(Scene to Graphics) Converts a Scene to a Graphics surface. Declaration public static implicit operator Graphics(Scene scene) Parameters Type Name Description Scene scene The Scene object. Returns Type Description Graphics Implements System.IDisposable"
  },
  "api/GameOverlay.Drawing.SolidBrush.html": {
    "href": "api/GameOverlay.Drawing.SolidBrush.html",
    "title": "Class SolidBrush | GameOverlay.Net Documentation",
    "keywords": "Class SolidBrush Represents a SolidBrush which is used for drawing on a Graphics surface. Inheritance Object SolidBrush Implements IDisposable IBrush Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public class SolidBrush : IDisposable, IBrush Constructors | Improve this Doc View Source SolidBrush(RenderTarget) Initializes a new SolidBrush for the given Graphics device using a transparent Color. Declaration public SolidBrush(RenderTarget renderTarget) Parameters Type Name Description SharpDX.Direct2D1.RenderTarget renderTarget A Graphics device. | Improve this Doc View Source SolidBrush(RenderTarget, Color) Initializes a new SolidBrush for the given Graphics device using the given Color. Declaration public SolidBrush(RenderTarget renderTarget, Color color) Parameters Type Name Description SharpDX.Direct2D1.RenderTarget renderTarget A Graphics device. Color color A Color structure including the color components for this SolidBrush. Properties | Improve this Doc View Source Brush Gets or sets the underlying Brush. Declaration public Brush Brush { get; set; } Property Value Type Description SharpDX.Direct2D1.Brush | Improve this Doc View Source Color Gets or sets the Color of the underlying Brush. Declaration public Color Color { get; set; } Property Value Type Description Color Methods | Improve this Doc View Source Dispose() Releases all resources used by this SolidBrush. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this SolidBrush. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(SolidBrush) Returns a value indicating whether two specified instances of SolidBrush represent the same value. Declaration public bool Equals(SolidBrush value) Parameters Type Name Description SolidBrush value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(SolidBrush, SolidBrush) Returns a value indicating whether two specified instances of SolidBrush represent the same value. Declaration public static bool Equals(SolidBrush left, SolidBrush right) Parameters Type Name Description SolidBrush left The first object to compare. SolidBrush right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a SolidBrush and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts this SolidBrush to a human-readable string. Declaration public override string ToString() Returns Type Description String The string representation of this SolidBrush. Overrides Object.ToString() Operators | Improve this Doc View Source Implicit(SolidBrush to SolidColorBrush) Converts a SolidBrush to a SharpDX SolidColorBrush- Declaration public static implicit operator SolidColorBrush(SolidBrush brush) Parameters Type Name Description SolidBrush brush A SolidBrush. Returns Type Description SharpDX.Direct2D1.SolidColorBrush Implements System.IDisposable IBrush"
  },
  "api/GameOverlay.Drawing.TransformationMatrix.html": {
    "href": "api/GameOverlay.Drawing.TransformationMatrix.html",
    "title": "Struct TransformationMatrix | GameOverlay.Net Documentation",
    "keywords": "Struct TransformationMatrix Represents a 3x2 matrix which is used to apply transformations on a render target and geometry. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct TransformationMatrix Constructors | Improve this Doc View Source TransformationMatrix(RawMatrix3x2) Initializes a new TransformationMatrix using the given RawMatrix3x2. Declaration public TransformationMatrix(RawMatrix3x2 matrix) Parameters Type Name Description SharpDX.Mathematics.Interop.RawMatrix3x2 matrix | Improve this Doc View Source TransformationMatrix(Single) Initializes a new instance of the TransformationMatrix struct. Declaration public TransformationMatrix(float value) Parameters Type Name Description Single value The value that will be assigned to all components. | Improve this Doc View Source TransformationMatrix(Single, Single, Single, Single, Single, Single) Initializes a new instance of the TransformationMatrix struct. Declaration public TransformationMatrix(float m11, float m12, float m21, float m22, float m31, float m32) Parameters Type Name Description Single m11 The value to assign at row 1 column 1 of the matrix. Single m12 The value to assign at row 1 column 2 of the matrix. Single m21 The value to assign at row 2 column 1 of the matrix. Single m22 The value to assign at row 2 column 2 of the matrix. Single m31 The value to assign at row 3 column 1 of the matrix. Single m32 The value to assign at row 3 column 2 of the matrix. | Improve this Doc View Source TransformationMatrix(Single[]) Initializes a new instance of the TransformationMatrix struct. Declaration public TransformationMatrix(float[] values) Parameters Type Name Description Single [] values The values to assign to the components of the matrix. This must be an array with six elements. Exceptions Type Condition ArgumentNullException Thrown when values is null . ArgumentOutOfRangeException Thrown when values contains more or less than six elements. Fields | Improve this Doc View Source Empty Gets an empty matrix. Declaration public static readonly TransformationMatrix Empty Field Value Type Description TransformationMatrix | Improve this Doc View Source Identity Gets the identity matrix. Declaration public static readonly TransformationMatrix Identity Field Value Type Description TransformationMatrix The identity matrix. Properties | Improve this Doc View Source IsIdentity Gets a value indicating whether this instance is an identity matrix. Declaration public bool IsIdentity { get; } Property Value Type Description Boolean true if this instance is an identity matrix; otherwise, false . | Improve this Doc View Source Item[Int32] Gets or sets the component at the specified index. Declaration public float this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the component to access. Property Value Type Description Single The value of the matrix component, depending on the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of the range [0, 5]. | Improve this Doc View Source Item[Int32, Int32] Gets or sets the component at the specified index. Declaration public float this[int row, int column] { get; set; } Parameters Type Name Description Int32 row The row of the matrix to access. Int32 column The column of the matrix to access. Property Value Type Description Single The value of the matrix component, depending on the index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the row or column is out of the range [0, 3]. | Improve this Doc View Source M11 Element (1,1) Declaration public float M11 { get; set; } Property Value Type Description Single | Improve this Doc View Source M12 Element (1,2) Declaration public float M12 { get; set; } Property Value Type Description Single | Improve this Doc View Source M21 Element (2,1) Declaration public float M21 { get; set; } Property Value Type Description Single | Improve this Doc View Source M22 Element (2,2) Declaration public float M22 { get; set; } Property Value Type Description Single | Improve this Doc View Source M31 Element (3,1) Declaration public float M31 { get; set; } Property Value Type Description Single | Improve this Doc View Source M32 Element (3,2) Declaration public float M32 { get; set; } Property Value Type Description Single | Improve this Doc View Source ScaleVector Gets or sets the scale of the matrix; that is M11 and M22. Declaration public Point ScaleVector { get; set; } Property Value Type Description Point | Improve this Doc View Source TranslationVector Gets or sets the translation of the matrix; that is M31 and M32. Declaration public Point TranslationVector { get; set; } Property Value Type Description Point Methods | Improve this Doc View Source Add(ref TransformationMatrix, ref TransformationMatrix) Determines the sum of two matrices. Declaration public static TransformationMatrix Add(ref TransformationMatrix left, ref TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first matrix to add. TransformationMatrix right The second matrix to add. Returns Type Description TransformationMatrix | Improve this Doc View Source Determinant() Calculates the determinant of this matrix. Declaration public float Determinant() Returns Type Description Single Result of the determinant. | Improve this Doc View Source Divide(ref TransformationMatrix, ref TransformationMatrix) Scales a matrix by the given value. Declaration public static TransformationMatrix Divide(ref TransformationMatrix left, ref TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The matrix to scale. TransformationMatrix right The amount by which to scale. Returns Type Description TransformationMatrix | Improve this Doc View Source Divide(ref TransformationMatrix, Single) Scales a matrix by the given value. Declaration public static TransformationMatrix Divide(ref TransformationMatrix left, float right) Parameters Type Name Description TransformationMatrix left The matrix to scale. Single right The amount by which to scale. Returns Type Description TransformationMatrix | Improve this Doc View Source Equals(TransformationMatrix) Determines whether the specified TransformationMatrix is equal to this instance. Declaration public bool Equals(TransformationMatrix other) Parameters Type Name Description TransformationMatrix other The TransformationMatrix to compare with this instance. Returns Type Description Boolean true if the specified TransformationMatrix is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(ref TransformationMatrix) Determines whether the specified TransformationMatrix is equal to this instance. Declaration public bool Equals(ref TransformationMatrix other) Parameters Type Name Description TransformationMatrix other The TransformationMatrix to compare with this instance. Returns Type Description Boolean true if the specified TransformationMatrix is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to this instance. Declaration public override bool Equals(object value) Parameters Type Name Description Object value The Object to compare with this instance. Returns Type Description Boolean true if the specified Object is equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() | Improve this Doc View Source Invert() Calculates the inverse of this matrix instance. Declaration public void Invert() | Improve this Doc View Source Invert(TransformationMatrix) Calculates the inverse of the specified matrix. Declaration public static TransformationMatrix Invert(TransformationMatrix value) Parameters Type Name Description TransformationMatrix value The matrix whose inverse is to be calculated. Returns Type Description TransformationMatrix the inverse of the specified matrix. | Improve this Doc View Source Invert(ref TransformationMatrix) Calculates the inverse of the specified matrix. Declaration public static TransformationMatrix Invert(ref TransformationMatrix value) Parameters Type Name Description TransformationMatrix value The matrix whose inverse is to be calculated. Returns Type Description TransformationMatrix | Improve this Doc View Source Lerp(ref TransformationMatrix, ref TransformationMatrix, Single) Performs a linear interpolation between two matrices. Declaration public static TransformationMatrix Lerp(ref TransformationMatrix start, ref TransformationMatrix end, float amount) Parameters Type Name Description TransformationMatrix start Start matrix. TransformationMatrix end End matrix. Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description TransformationMatrix Remarks Passing amount a value of 0 will cause start to be returned; a value of 1 will cause end to be returned. | Improve this Doc View Source Multiply(ref TransformationMatrix, ref TransformationMatrix) Scales a matrix by the given value. Declaration public static TransformationMatrix Multiply(ref TransformationMatrix left, ref TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The matrix to scale. TransformationMatrix right The amount by which to scale. Returns Type Description TransformationMatrix | Improve this Doc View Source Multiply(ref TransformationMatrix, Single) Scales a matrix by the given value. Declaration public static TransformationMatrix Multiply(ref TransformationMatrix left, float right) Parameters Type Name Description TransformationMatrix left The matrix to scale. Single right The amount by which to scale. Returns Type Description TransformationMatrix | Improve this Doc View Source Negate(ref TransformationMatrix) Negates a matrix. Declaration public static TransformationMatrix Negate(ref TransformationMatrix value) Parameters Type Name Description TransformationMatrix value The matrix to be negated. Returns Type Description TransformationMatrix | Improve this Doc View Source Rotation(Single) Creates a matrix that rotates. Declaration public static TransformationMatrix Rotation(float angle) Parameters Type Name Description Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Returns Type Description TransformationMatrix | Improve this Doc View Source Rotation(Single, Point) Creates a matrix that rotates about a specified center. Declaration public static TransformationMatrix Rotation(float angle, Point center) Parameters Type Name Description Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Point center The center of the rotation. Returns Type Description TransformationMatrix | Improve this Doc View Source Scaling(Point) Creates a matrix that scales along the x-axis and y-axis. Declaration public static TransformationMatrix Scaling(Point scale) Parameters Type Name Description Point scale Scaling factor for both axes. Returns Type Description TransformationMatrix The created scaling matrix. | Improve this Doc View Source Scaling(ref Point) Creates a matrix that scales along the x-axis and y-axis. Declaration public static TransformationMatrix Scaling(ref Point scale) Parameters Type Name Description Point scale Scaling factor for both axes. Returns Type Description TransformationMatrix | Improve this Doc View Source Scaling(Single) Creates a matrix that uniformly scales along both axes. Declaration public static TransformationMatrix Scaling(float scale) Parameters Type Name Description Single scale The uniform scale that is applied along both axes. Returns Type Description TransformationMatrix | Improve this Doc View Source Scaling(Single, Single) Creates a matrix that scales along the x-axis and y-axis. Declaration public static TransformationMatrix Scaling(float x, float y) Parameters Type Name Description Single x Scaling factor that is applied along the x-axis. Single y Scaling factor that is applied along the y-axis. Returns Type Description TransformationMatrix | Improve this Doc View Source Scaling(Single, Single, Point) Creates a matrix that is scaling from a specified center. Declaration public static TransformationMatrix Scaling(float x, float y, Point center) Parameters Type Name Description Single x Scaling factor that is applied along the x-axis. Single y Scaling factor that is applied along the y-axis. Point center The center of the scaling. Returns Type Description TransformationMatrix The created scaling matrix. | Improve this Doc View Source Skew(Single, Single) Creates a skew matrix. Declaration public static TransformationMatrix Skew(float angleX, float angleY) Parameters Type Name Description Single angleX Angle of skew along the X-axis in radians. Single angleY Angle of skew along the Y-axis in radians. Returns Type Description TransformationMatrix | Improve this Doc View Source SmoothStep(ref TransformationMatrix, ref TransformationMatrix, Single) Performs a cubic interpolation between two matrices. Declaration public static TransformationMatrix SmoothStep(ref TransformationMatrix start, ref TransformationMatrix end, float amount) Parameters Type Name Description TransformationMatrix start Start matrix. TransformationMatrix end End matrix. Single amount Value between 0 and 1 indicating the weight of end . Returns Type Description TransformationMatrix | Improve this Doc View Source Subtract(ref TransformationMatrix, ref TransformationMatrix) Determines the difference between two matrices. Declaration public static TransformationMatrix Subtract(ref TransformationMatrix left, ref TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first matrix to subtract. TransformationMatrix right The second matrix to subtract. Returns Type Description TransformationMatrix | Improve this Doc View Source ToArray() Creates an array containing the elements of the matrix. Declaration public float[] ToArray() Returns Type Description Single [] A six-element array containing the components of the matrix. | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns a String that represents this instance. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description IFormatProvider formatProvider The format provider. Returns Type Description String A String that represents this instance. | Improve this Doc View Source ToString(String) Returns a String that represents this instance. Declaration public string ToString(string format) Parameters Type Name Description String format The format. Returns Type Description String A String that represents this instance. | Improve this Doc View Source ToString(String, IFormatProvider) Returns a String that represents this instance. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format The format. IFormatProvider formatProvider The format provider. Returns Type Description String A String that represents this instance. | Improve this Doc View Source Transformation(Single, Single, Single, Single, Single) Creates a transformation matrix. Declaration public static TransformationMatrix Transformation(float xScale, float yScale, float angle, float xOffset, float yOffset) Parameters Type Name Description Single xScale Scaling factor that is applied along the x-axis. Single yScale Scaling factor that is applied along the y-axis. Single angle Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis. Single xOffset X-coordinate offset. Single yOffset Y-coordinate offset. Returns Type Description TransformationMatrix | Improve this Doc View Source TransformPoint(TransformationMatrix, Point) Transforms a vector by this matrix. Declaration public static Point TransformPoint(TransformationMatrix matrix, Point point) Parameters Type Name Description TransformationMatrix matrix The matrix to use as a transformation matrix. Point point The original vector to apply the transformation. Returns Type Description Point The result of the transformation for the input vector. | Improve this Doc View Source TransformPoint(ref TransformationMatrix, ref Point) Transforms a vector by this matrix. Declaration public static Point TransformPoint(ref TransformationMatrix matrix, ref Point point) Parameters Type Name Description TransformationMatrix matrix The matrix to use as a transformation matrix. Point point The original vector to apply the transformation. Returns Type Description Point | Improve this Doc View Source Translation(Point) Creates a translation matrix using the specified offsets. Declaration public static TransformationMatrix Translation(Point value) Parameters Type Name Description Point value The offset for both coordinate planes. Returns Type Description TransformationMatrix The created translation matrix. | Improve this Doc View Source Translation(ref Point) Creates a translation matrix using the specified offsets. Declaration public static TransformationMatrix Translation(ref Point value) Parameters Type Name Description Point value The offset for both coordinate planes. Returns Type Description TransformationMatrix | Improve this Doc View Source Translation(Single, Single) Creates a translation matrix using the specified offsets. Declaration public static TransformationMatrix Translation(float x, float y) Parameters Type Name Description Single x X-coordinate offset. Single y Y-coordinate offset. Returns Type Description TransformationMatrix Operators | Improve this Doc View Source Addition(TransformationMatrix, TransformationMatrix) Adds two matrices. Declaration public static TransformationMatrix operator +(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first matrix to add. TransformationMatrix right The second matrix to add. Returns Type Description TransformationMatrix The sum of the two matrices. | Improve this Doc View Source Division(TransformationMatrix, TransformationMatrix) Divides two matrices. Declaration public static TransformationMatrix operator /(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first matrix to divide. TransformationMatrix right The second matrix to divide. Returns Type Description TransformationMatrix The quotient of the two matrices. | Improve this Doc View Source Division(TransformationMatrix, Single) Scales a matrix by a given value. Declaration public static TransformationMatrix operator /(TransformationMatrix left, float right) Parameters Type Name Description TransformationMatrix left The matrix to scale. Single right The amount by which to scale. Returns Type Description TransformationMatrix The scaled matrix. | Improve this Doc View Source Equality(TransformationMatrix, TransformationMatrix) Tests for equality between two objects. Declaration public static bool operator ==(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first value to compare. TransformationMatrix right The second value to compare. Returns Type Description Boolean true if left has the same value as right ; otherwise, false . | Improve this Doc View Source Explicit(RawMatrix3x2 to TransformationMatrix) Converts the given RawMatrix3x2 to a TransformationMatrix. Declaration public static explicit operator TransformationMatrix(RawMatrix3x2 value) Parameters Type Name Description SharpDX.Mathematics.Interop.RawMatrix3x2 value The RawMatrix3x2 to convert. Returns Type Description TransformationMatrix | Improve this Doc View Source Implicit(TransformationMatrix to RawMatrix3x2) Converts the given TransformationMatrix to a RawMatrix3x2. Declaration public static implicit operator RawMatrix3x2(TransformationMatrix value) Parameters Type Name Description TransformationMatrix value The TransformationMatrix to convert. Returns Type Description SharpDX.Mathematics.Interop.RawMatrix3x2 | Improve this Doc View Source Inequality(TransformationMatrix, TransformationMatrix) Tests for inequality between two objects. Declaration public static bool operator !=(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first value to compare. TransformationMatrix right The second value to compare. Returns Type Description Boolean true if left has a different value than right ; otherwise, false . | Improve this Doc View Source Multiply(TransformationMatrix, TransformationMatrix) Scales a matrix by a given value. Declaration public static TransformationMatrix operator *(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The matrix to scale. TransformationMatrix right The amount by which to scale. Returns Type Description TransformationMatrix The scaled matrix. | Improve this Doc View Source Multiply(TransformationMatrix, Single) Scales a matrix by a given value. Declaration public static TransformationMatrix operator *(TransformationMatrix left, float right) Parameters Type Name Description TransformationMatrix left The amount by which to scale. Single right The matrix to scale. Returns Type Description TransformationMatrix The scaled matrix. | Improve this Doc View Source Subtraction(TransformationMatrix, TransformationMatrix) Subtracts two matrices. Declaration public static TransformationMatrix operator -(TransformationMatrix left, TransformationMatrix right) Parameters Type Name Description TransformationMatrix left The first matrix to subtract. TransformationMatrix right The second matrix to subtract. Returns Type Description TransformationMatrix The difference between the two matrices. | Improve this Doc View Source UnaryNegation(TransformationMatrix) Negates a matrix. Declaration public static TransformationMatrix operator -(TransformationMatrix value) Parameters Type Name Description TransformationMatrix value The matrix to negate. Returns Type Description TransformationMatrix The negated matrix."
  },
  "api/GameOverlay.Drawing.Triangle.html": {
    "href": "api/GameOverlay.Drawing.Triangle.html",
    "title": "Struct Triangle | GameOverlay.Net Documentation",
    "keywords": "Struct Triangle Represents the dimension of a triangle. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Drawing Assembly : GameOverlay.dll Syntax public struct Triangle Constructors | Improve this Doc View Source Triangle(Point, Point, Point) Initializes a new Triangle using the given Points. Declaration public Triangle(Point a, Point b, Point c) Parameters Type Name Description Point a The lower-left Point of this Triangle. Point b The lower-right Point of this Triangle. Point c The upper-center Point of this Triangle. | Improve this Doc View Source Triangle(Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new Triangle using the given Points. Declaration public Triangle(int a_x, int a_y, int b_x, int b_y, int c_x, int c_y) Parameters Type Name Description Int32 a_x The x-coordinate of the lower-left Point of this Triangle. Int32 a_y The y-coordinate of the lower-left Point of this Triangle. Int32 b_x The x-coordinate of the lower-right Point of this Triangle. Int32 b_y The y-coordinate lower-right Point of this Triangle. Int32 c_x The x-coordinate of the upper-center Point of this Triangle. Int32 c_y The y-coordinate upper-center Point of this Triangle. | Improve this Doc View Source Triangle(Single, Single, Single, Single, Single, Single) Initializes a new Triangle using the given Points. Declaration public Triangle(float a_x, float a_y, float b_x, float b_y, float c_x, float c_y) Parameters Type Name Description Single a_x The x-coordinate of the lower-left Point of this Triangle. Single a_y The y-coordinate of the lower-left Point of this Triangle. Single b_x The x-coordinate of the lower-right Point of this Triangle. Single b_y The y-coordinate lower-right Point of this Triangle. Single c_x The x-coordinate of the upper-center Point of this Triangle. Single c_y The y-coordinate upper-center Point of this Triangle. Fields | Improve this Doc View Source A The lower-left Point of this Triangle. Declaration public Point A Field Value Type Description Point | Improve this Doc View Source B The lower-right Point of this Triangle. Declaration public Point B Field Value Type Description Point | Improve this Doc View Source C The upper-center Point of this Triangle. Declaration public Point C Field Value Type Description Point Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a Triangle and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts this Triangle structure to a human-readable string. Declaration public override string ToString() Returns Type Description String The string representation of this Triangle. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(Triangle, Triangle) Determines whether two specified instances are equal. Declaration public static bool operator ==(Triangle left, Triangle right) Parameters Type Name Description Triangle left The first object to compare. Triangle right The second object to compare. Returns Type Description Boolean true if left and right represent the same value; otherwise, false . | Improve this Doc View Source Inequality(Triangle, Triangle) Determines whether two specified instances are not equal. Declaration public static bool operator !=(Triangle left, Triangle right) Parameters Type Name Description Triangle left The first object to compare. Triangle right The second object to compare. Returns Type Description Boolean true if left and right do not represent the same value; otherwise, false ."
  },
  "api/GameOverlay.Windows.DestroyGraphicsEventArgs.html": {
    "href": "api/GameOverlay.Windows.DestroyGraphicsEventArgs.html",
    "title": "Class DestroyGraphicsEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class DestroyGraphicsEventArgs Provides data for the DestroyGraphics event. Inheritance Object EventArgs DestroyGraphicsEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class DestroyGraphicsEventArgs : EventArgs Constructors | Improve this Doc View Source DestroyGraphicsEventArgs(Graphics) Initializes a new DestroyGraphicsEventArgs with a Graphics surface. Declaration public DestroyGraphicsEventArgs(Graphics graphics) Parameters Type Name Description Graphics graphics Properties | Improve this Doc View Source Graphics Gets the Graphics surface. Declaration public Graphics Graphics { get; } Property Value Type Description Graphics"
  },
  "api/GameOverlay.Windows.DrawGraphicsEventArgs.html": {
    "href": "api/GameOverlay.Windows.DrawGraphicsEventArgs.html",
    "title": "Class DrawGraphicsEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class DrawGraphicsEventArgs Provides data for the DrawGraphics event. Inheritance Object EventArgs DrawGraphicsEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class DrawGraphicsEventArgs : EventArgs Constructors | Improve this Doc View Source DrawGraphicsEventArgs(Graphics, Int32, Int64, Int64) Initializes a new DrawGraphicsEventArgs with a Graphics surface. Declaration public DrawGraphicsEventArgs(Graphics graphics, int frameCount, long frameTime, long deltaTime) Parameters Type Name Description Graphics graphics A graphics surface. Int32 frameCount The number of the currently rendered frame. Starting at 1. Int64 frameTime The current time in milliseconds. Int64 deltaTime The elapsed time in milliseconds since the last frame. Properties | Improve this Doc View Source DeltaTime Gets the elapsed time in milliseconds since the last frame. Declaration public long DeltaTime { get; } Property Value Type Description Int64 | Improve this Doc View Source FrameCount Gets the number of frames rendered in the current loop. Declaration public int FrameCount { get; } Property Value Type Description Int32 | Improve this Doc View Source FrameTime Gets the current time in milliseconds. Declaration public long FrameTime { get; } Property Value Type Description Int64 | Improve this Doc View Source Graphics Gets the Graphics surface. Declaration public Graphics Graphics { get; } Property Value Type Description Graphics"
  },
  "api/GameOverlay.Windows.GraphicsWindow.html": {
    "href": "api/GameOverlay.Windows.GraphicsWindow.html",
    "title": "Class GraphicsWindow | GameOverlay.Net Documentation",
    "keywords": "Class GraphicsWindow Represents an OverlayWindow which is used to draw at any given frame rate. Inheritance Object OverlayWindow GraphicsWindow StickyWindow Implements IDisposable Inherited Members OverlayWindow.ClassName OverlayWindow.Handle OverlayWindow.Height OverlayWindow.IsInitialized OverlayWindow.IsTopmost OverlayWindow.IsVisible OverlayWindow.MenuName OverlayWindow.Title OverlayWindow.Width OverlayWindow.X OverlayWindow.Y OverlayWindow.PositionChanged OverlayWindow.SizeChanged OverlayWindow.VisibilityChanged OverlayWindow.PropertyChanged OverlayWindow.OnPositionChanged(Int32, Int32) OverlayWindow.OnPropertyChanged(String, Object) OverlayWindow.Equals(OverlayWindow, OverlayWindow) OverlayWindow.Equals(Object) OverlayWindow.Equals(OverlayWindow) OverlayWindow.FitTo(IntPtr, Boolean) OverlayWindow.GetHashCode() OverlayWindow.Hide() OverlayWindow.Move(Int32, Int32) OverlayWindow.PlaceAbove(IntPtr) OverlayWindow.Recreate() OverlayWindow.Resize(Int32, Int32) OverlayWindow.Resize(Int32, Int32, Int32, Int32) OverlayWindow.Show() OverlayWindow.ToString() OverlayWindow.Dispose() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class GraphicsWindow : OverlayWindow, IDisposable Constructors | Improve this Doc View Source GraphicsWindow(Graphics) Initializes a new GraphicsWindow. Declaration public GraphicsWindow(Graphics device = null) Parameters Type Name Description Graphics device Optionally specify a Graphics device to use. | Improve this Doc View Source GraphicsWindow(Int32, Int32, Int32, Int32, Graphics) Initializes a new GraphicsWindow with the specified window position and size. Declaration public GraphicsWindow(int x, int y, int width, int height, Graphics device = null) Parameters Type Name Description Int32 x The window position on the X-Axis. Int32 y The window position on the Y-Axis. Int32 width The width of the window. Int32 height The height of the window. Graphics device Optionally specify a Graphics device to use. Properties | Improve this Doc View Source FPS Gets or sets the frames per second (frame rate) at which this instance invokes its DrawGraphics event. Declaration public int FPS { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Graphics Gets or sets the used Graphics surface. Declaration public Graphics Graphics { get; } Property Value Type Description Graphics | Improve this Doc View Source IsPaused Gets or sets a Boolean which determines whether this instance is paused. Declaration public bool IsPaused { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsRunning Gets or sets a Boolean which determines whether this instance is running. Declaration public bool IsRunning { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Create() Setup and initializes the window. Declaration public override void Create() Overrides OverlayWindow.Create() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this GraphicsWindow. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. Overrides OverlayWindow.Dispose(Boolean) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source Join() Waits until the Thread used by this instance has exited. Declaration public override void Join() Overrides OverlayWindow.Join() | Improve this Doc View Source OnDestroyGraphics(Graphics) Gets called when the graphics thread destorys the Graphics surface. Declaration protected virtual void OnDestroyGraphics(Graphics graphics) Parameters Type Name Description Graphics graphics A Graphics surface. | Improve this Doc View Source OnDrawGraphics(Int32, Int64, Int64) Gets called when the graphics thread needs to render a new Scene / frame. Declaration protected virtual void OnDrawGraphics(int frameCount, long frameTime, long deltaTime) Parameters Type Name Description Int32 frameCount The number of the currently rendered frame. Starting at 1. Int64 frameTime The current time in milliseconds. Int64 deltaTime The elapsed time in milliseconds since the last frame. | Improve this Doc View Source OnSetupGraphics(Graphics) Gets called when the graphics thread setups the Graphics surface. Declaration protected virtual void OnSetupGraphics(Graphics graphics) Parameters Type Name Description Graphics graphics A Graphics surface. | Improve this Doc View Source OnSizeChanged(Int32, Int32) Gets called whenever the size of the window changes. Declaration protected override void OnSizeChanged(int width, int height) Parameters Type Name Description Int32 width The new width of the window. Int32 height The new height of the window. Overrides OverlayWindow.OnSizeChanged(Int32, Int32) | Improve this Doc View Source OnVisibilityChanged(Boolean) Gets called whenever the visibility of the window changes. Declaration protected override void OnVisibilityChanged(bool isVisible) Parameters Type Name Description Boolean isVisible A Boolean indicating the new visibility of the window. Overrides OverlayWindow.OnVisibilityChanged(Boolean) | Improve this Doc View Source Pause() Pauses the graphics thread. Declaration public void Pause() | Improve this Doc View Source Unpause() Resumes the graphics thread. Declaration public void Unpause() Events | Improve this Doc View Source DestroyGraphics Fires when you should free any resources used for drawing with this instance. Declaration public event EventHandler<DestroyGraphicsEventArgs> DestroyGraphics Event Type Type Description EventHandler < DestroyGraphicsEventArgs > | Improve this Doc View Source DrawGraphics Fires when a new Scene / frame needs to be rendered. Declaration public event EventHandler<DrawGraphicsEventArgs> DrawGraphics Event Type Type Description EventHandler < DrawGraphicsEventArgs > | Improve this Doc View Source SetupGraphics Fires when you should allocate any resources you use to draw using this instance. Declaration public event EventHandler<SetupGraphicsEventArgs> SetupGraphics Event Type Type Description EventHandler < SetupGraphicsEventArgs > Implements System.IDisposable"
  },
  "api/GameOverlay.Windows.html": {
    "href": "api/GameOverlay.Windows.html",
    "title": "Namespace GameOverlay.Windows | GameOverlay.Net Documentation",
    "keywords": "Namespace GameOverlay.Windows Classes DestroyGraphicsEventArgs Provides data for the DestroyGraphics event. DrawGraphicsEventArgs Provides data for the DrawGraphics event. GraphicsWindow Represents an OverlayWindow which is used to draw at any given frame rate. OverlayPositionEventArgs Provides data for the PositionChanged event. OverlayPropertyChangedEventArgs OverlaySizeEventArgs Provides data for the SizeChanged event. OverlayVisibilityEventArgs Provides data for the VisibilityChanged event. OverlayWindow Represents a transparent overlay window. SetupGraphicsEventArgs Provides data for the SetupGraphics event. StickyWindow Represents a StickyWindow which uses a GraphicsWindow sticks to a parent window. WindowHelper Provides methods to interact with windows. Structs WindowBounds Represents the boundaries of a window."
  },
  "api/GameOverlay.Windows.OverlayPositionEventArgs.html": {
    "href": "api/GameOverlay.Windows.OverlayPositionEventArgs.html",
    "title": "Class OverlayPositionEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class OverlayPositionEventArgs Provides data for the PositionChanged event. Inheritance Object EventArgs OverlayPositionEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class OverlayPositionEventArgs : EventArgs Constructors | Improve this Doc View Source OverlayPositionEventArgs(Int32, Int32) Initializes a new OverlayPositionEventArgs using the given coordinates. Declaration public OverlayPositionEventArgs(int x, int y) Parameters Type Name Description Int32 x The new x-coordinate of the window. Int32 y The new y-coordinate of the window. Properties | Improve this Doc View Source X The new x-coordinate of the window. Declaration public int X { get; } Property Value Type Description Int32 | Improve this Doc View Source Y The new y-coordinate of the window. Declaration public int Y { get; } Property Value Type Description Int32"
  },
  "api/GameOverlay.Windows.OverlayPropertyChangedEventArgs.html": {
    "href": "api/GameOverlay.Windows.OverlayPropertyChangedEventArgs.html",
    "title": "Class OverlayPropertyChangedEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class OverlayPropertyChangedEventArgs Inheritance Object EventArgs OverlayPropertyChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class OverlayPropertyChangedEventArgs : EventArgs Constructors | Improve this Doc View Source OverlayPropertyChangedEventArgs(String, Object) Initializes a new OverlayPropertyChangedEventArgs using the given arguments. Declaration public OverlayPropertyChangedEventArgs(string propertyName, object value) Parameters Type Name Description String propertyName The name of a property. (nameof(x)) Object value The new value of the property. Properties | Improve this Doc View Source PropertyName Contains the name of the changed property. (case-sensitive) Declaration public string PropertyName { get; } Property Value Type Description String | Improve this Doc View Source Value Contains the new value of the property. Declaration public object Value { get; } Property Value Type Description Object"
  },
  "api/GameOverlay.Windows.OverlaySizeEventArgs.html": {
    "href": "api/GameOverlay.Windows.OverlaySizeEventArgs.html",
    "title": "Class OverlaySizeEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class OverlaySizeEventArgs Provides data for the SizeChanged event. Inheritance Object EventArgs OverlaySizeEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class OverlaySizeEventArgs : EventArgs Constructors | Improve this Doc View Source OverlaySizeEventArgs(Int32, Int32) Initializes a new OverlaySizeEventArgs using the given width and height. Declaration public OverlaySizeEventArgs(int width, int height) Parameters Type Name Description Int32 width The new width of the window. Int32 height The new height of the window. Properties | Improve this Doc View Source Height The new height of the window. Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Width The new width of the window. Declaration public int Width { get; } Property Value Type Description Int32"
  },
  "api/GameOverlay.Windows.OverlayVisibilityEventArgs.html": {
    "href": "api/GameOverlay.Windows.OverlayVisibilityEventArgs.html",
    "title": "Class OverlayVisibilityEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class OverlayVisibilityEventArgs Provides data for the VisibilityChanged event. Inheritance Object EventArgs OverlayVisibilityEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class OverlayVisibilityEventArgs : EventArgs Constructors | Improve this Doc View Source OverlayVisibilityEventArgs(Boolean) Initializes a new OverlayVisibilityEventArgs using the given visibility. Declaration public OverlayVisibilityEventArgs(bool isVisible) Parameters Type Name Description Boolean isVisible Properties | Improve this Doc View Source IsVisible Gets a Boolean indicating the visibility of the window. Declaration public bool IsVisible { get; } Property Value Type Description Boolean"
  },
  "api/GameOverlay.Windows.OverlayWindow.html": {
    "href": "api/GameOverlay.Windows.OverlayWindow.html",
    "title": "Class OverlayWindow | GameOverlay.Net Documentation",
    "keywords": "Class OverlayWindow Represents a transparent overlay window. Inheritance Object OverlayWindow GraphicsWindow Implements IDisposable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class OverlayWindow : IDisposable Constructors | Improve this Doc View Source OverlayWindow() Initializes a new OverlayWindow. Declaration public OverlayWindow() | Improve this Doc View Source OverlayWindow(Int32, Int32, Int32, Int32) Initializes a new OverlayWindow using the given postion and size. Declaration public OverlayWindow(int x, int y, int width, int height) Parameters Type Name Description Int32 x The x-coordinate of the window. Int32 y The y-coordinate of the window. Int32 width The width of the window. Int32 height The height of the window. Properties | Improve this Doc View Source ClassName Gets or sets the windows class name. Declaration public string ClassName { get; set; } Property Value Type Description String | Improve this Doc View Source Handle Gets the window handle of this instance. Declaration public IntPtr Handle { get; } Property Value Type Description IntPtr | Improve this Doc View Source Height Gets or sets the height of the window. Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source IsInitialized A Boolean indicating whether this instance is initialized. Declaration public bool IsInitialized { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTopmost Gets or sets a Boolean indicating whether this window is topmost. Declaration public bool IsTopmost { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsVisible Gets or sets a Boolean indicating whether this window is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MenuName Gets the windows menu name. Declaration public string MenuName { get; set; } Property Value Type Description String | Improve this Doc View Source Title Gets or sets the windows title. Declaration public string Title { get; set; } Property Value Type Description String | Improve this Doc View Source Width Gets or sets the width of the window. Declaration public int Width { get; set; } Property Value Type Description Int32 | Improve this Doc View Source X Gets or sets the x-coordinate of the window. Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Gets or sets the y-coordinate of the window. Declaration public int Y { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Create() Setup and initializes the window. Declaration public virtual void Create() | Improve this Doc View Source Dispose() Releases all resources used by this OverlayWindow. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by this OverlayWindow. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing A Boolean value indicating whether this is called from the destructor. | Improve this Doc View Source Equals(OverlayWindow) Returns a value indicating whether two specified instances of OverlayWindow represent the same value. Declaration public bool Equals(OverlayWindow value) Parameters Type Name Description OverlayWindow value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(OverlayWindow, OverlayWindow) Returns a value indicating whether two specified instances of OverlayWindow represent the same value. Declaration public static bool Equals(OverlayWindow left, OverlayWindow right) Parameters Type Name Description OverlayWindow left The first object to compare. OverlayWindow right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a OverlayWindow and equal to this instance; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source Finalize() Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source FitTo(IntPtr, Boolean) Adapts to another window in the postion and size. Declaration public void FitTo(IntPtr windowHandle, bool attachToClientArea = false) Parameters Type Name Description IntPtr windowHandle The target window handle. Boolean attachToClientArea A Boolean determining whether to fit to the client area of the target window. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Hide() Makes the window invisible. Declaration public void Hide() | Improve this Doc View Source Join() Waits until the Thread used by this instance has exited. Declaration public virtual void Join() | Improve this Doc View Source Move(Int32, Int32) Changes the position of the window using the given coordinates. Declaration public void Move(int x, int y) Parameters Type Name Description Int32 x The new x-coordinate of the window. Int32 y The new y-coordinate of the window. | Improve this Doc View Source OnPositionChanged(Int32, Int32) Gets called whenever the position of the window changes. Declaration protected virtual void OnPositionChanged(int x, int y) Parameters Type Name Description Int32 x The new x-coordinate of the window. Int32 y The new y-coordinate of the window. | Improve this Doc View Source OnPropertyChanged(String, Object) Gets called whenever a property of this instance changes. Declaration protected virtual void OnPropertyChanged(string propertyName, object value) Parameters Type Name Description String propertyName The name of the changed property. (case-sensitive) Object value The new value of the changed property. | Improve this Doc View Source OnSizeChanged(Int32, Int32) Gets called whenever the size of the window changes. Declaration protected virtual void OnSizeChanged(int width, int height) Parameters Type Name Description Int32 width The new width of the window. Int32 height The new height of the window. | Improve this Doc View Source OnVisibilityChanged(Boolean) Gets called whenever the visibility of the window changes. Declaration protected virtual void OnVisibilityChanged(bool isVisible) Parameters Type Name Description Boolean isVisible A Boolean indicating the new visibility of the window. | Improve this Doc View Source PlaceAbove(IntPtr) Places the OverlayWindow above the target window according to the windows z-order. Declaration public void PlaceAbove(IntPtr windowHandle) Parameters Type Name Description IntPtr windowHandle The target window handle. | Improve this Doc View Source Recreate() Destroys the current window and creates a new one using the same attributes. Declaration public void Recreate() | Improve this Doc View Source Resize(Int32, Int32) Changes the size of the window using the given width and height. Declaration public void Resize(int width, int height) Parameters Type Name Description Int32 width The new width of the window. Int32 height The new height of the window. | Improve this Doc View Source Resize(Int32, Int32, Int32, Int32) Changes the size of the window using the given dimension. Declaration public void Resize(int x, int y, int width, int height) Parameters Type Name Description Int32 x The new x-coordinate of the window. Int32 y The new y-coordinate of the window. Int32 width The new width of the window. Int32 height The new height of the window. | Improve this Doc View Source Show() Makes the window visible. Declaration public void Show() | Improve this Doc View Source ToString() Converts this OverlayWindow structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this OverlayWindow. Overrides Object.ToString() Events | Improve this Doc View Source PositionChanged Fires when the postion of the window has changed. Declaration public event EventHandler<OverlayPositionEventArgs> PositionChanged Event Type Type Description EventHandler < OverlayPositionEventArgs > | Improve this Doc View Source PropertyChanged Fires when a property of this class changed it's value. Declaration public event EventHandler<OverlayPropertyChangedEventArgs> PropertyChanged Event Type Type Description EventHandler < OverlayPropertyChangedEventArgs > | Improve this Doc View Source SizeChanged Fires when the size of the window has changed. Declaration public event EventHandler<OverlaySizeEventArgs> SizeChanged Event Type Type Description EventHandler < OverlaySizeEventArgs > | Improve this Doc View Source VisibilityChanged Fires when the visibility of the window has changed. Declaration public event EventHandler<OverlayVisibilityEventArgs> VisibilityChanged Event Type Type Description EventHandler < OverlayVisibilityEventArgs > Implements System.IDisposable"
  },
  "api/GameOverlay.Windows.SetupGraphicsEventArgs.html": {
    "href": "api/GameOverlay.Windows.SetupGraphicsEventArgs.html",
    "title": "Class SetupGraphicsEventArgs | GameOverlay.Net Documentation",
    "keywords": "Class SetupGraphicsEventArgs Provides data for the SetupGraphics event. Inheritance Object EventArgs SetupGraphicsEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class SetupGraphicsEventArgs : EventArgs Constructors | Improve this Doc View Source SetupGraphicsEventArgs(Graphics, Boolean) Initializes a new SetupGraphicsEventArgs with a Graphics surface. Declaration public SetupGraphicsEventArgs(Graphics graphics, bool recreateResources = false) Parameters Type Name Description Graphics graphics Boolean recreateResources Properties | Improve this Doc View Source Graphics Gets the Graphics surface. Declaration public Graphics Graphics { get; } Property Value Type Description Graphics | Improve this Doc View Source RecreateResources Gets a boolean determining whether resources (brushes and images) have to be created again since the underlying device has changed. Declaration public bool RecreateResources { get; } Property Value Type Description Boolean"
  },
  "api/GameOverlay.Windows.StickyWindow.html": {
    "href": "api/GameOverlay.Windows.StickyWindow.html",
    "title": "Class StickyWindow | GameOverlay.Net Documentation",
    "keywords": "Class StickyWindow Represents a StickyWindow which uses a GraphicsWindow sticks to a parent window. Inheritance Object OverlayWindow GraphicsWindow StickyWindow Implements IDisposable Inherited Members GraphicsWindow.FPS GraphicsWindow.Graphics GraphicsWindow.IsPaused GraphicsWindow.IsRunning GraphicsWindow.DestroyGraphics GraphicsWindow.DrawGraphics GraphicsWindow.SetupGraphics GraphicsWindow.Dispose(Boolean) GraphicsWindow.OnDestroyGraphics(Graphics) GraphicsWindow.OnSetupGraphics(Graphics) GraphicsWindow.OnSizeChanged(Int32, Int32) GraphicsWindow.OnVisibilityChanged(Boolean) GraphicsWindow.Create() GraphicsWindow.Join() GraphicsWindow.Pause() GraphicsWindow.Unpause() OverlayWindow.ClassName OverlayWindow.Handle OverlayWindow.Height OverlayWindow.IsInitialized OverlayWindow.IsTopmost OverlayWindow.IsVisible OverlayWindow.MenuName OverlayWindow.Title OverlayWindow.Width OverlayWindow.X OverlayWindow.Y OverlayWindow.PositionChanged OverlayWindow.SizeChanged OverlayWindow.VisibilityChanged OverlayWindow.PropertyChanged OverlayWindow.OnPositionChanged(Int32, Int32) OverlayWindow.OnPropertyChanged(String, Object) OverlayWindow.Equals(OverlayWindow, OverlayWindow) OverlayWindow.Equals(Object) OverlayWindow.Equals(OverlayWindow) OverlayWindow.FitTo(IntPtr, Boolean) OverlayWindow.GetHashCode() OverlayWindow.Hide() OverlayWindow.Move(Int32, Int32) OverlayWindow.PlaceAbove(IntPtr) OverlayWindow.Recreate() OverlayWindow.Resize(Int32, Int32) OverlayWindow.Resize(Int32, Int32, Int32, Int32) OverlayWindow.Show() OverlayWindow.ToString() OverlayWindow.Dispose() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public class StickyWindow : GraphicsWindow, IDisposable Constructors | Improve this Doc View Source StickyWindow() Initializes a new StickyWindow with a default window position and size. Declaration public StickyWindow() | Improve this Doc View Source StickyWindow(Int32, Int32, Int32, Int32) Initializes a new StickyWindow with the given window position and size. Declaration public StickyWindow(int x, int y, int width, int height) Parameters Type Name Description Int32 x The position of the window on the X-Axis of the desktop. Int32 y The position of the window on the Y-Axis of the desktop. Int32 width The width of the window. Int32 height The height of the window. | Improve this Doc View Source StickyWindow(Int32, Int32, Int32, Int32, IntPtr, Graphics) Initializes a new StickyWindow with the given window position and size and the window handle of the parent window. Declaration public StickyWindow(int x, int y, int width, int height, IntPtr parentWindow, Graphics device = null) Parameters Type Name Description Int32 x The position of the window on the X-Axis of the desktop. Int32 y The position of the window on the Y-Axis of the desktop. Int32 width The width of the window. Int32 height The height of the window. IntPtr parentWindow An IntPtr representing the parent windows handle. Graphics device Optionally specify a Graphics device to use. | Improve this Doc View Source StickyWindow(IntPtr, Graphics) Initializes a new StickyWindow with the ability to stick to a parent window. Declaration public StickyWindow(IntPtr parentWindow, Graphics device = null) Parameters Type Name Description IntPtr parentWindow An IntPtr representing the parent windows handle. Graphics device Optionally specify a Graphics device to use. Properties | Improve this Doc View Source AttachToClientArea Gets or sets a Boolean which indicates wether to stick to the parents client area. Declaration public bool AttachToClientArea { get; set; } Property Value Type Description Boolean | Improve this Doc View Source BypassTopmost Gets or sets a Boolean which indicates wether to bypass the need of the windows Topmost flag. Declaration public bool BypassTopmost { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ParentWindowHandle Gets or Sets an IntPtr which is used to identify the parent window. Declaration public IntPtr ParentWindowHandle { get; set; } Property Value Type Description IntPtr Methods | Improve this Doc View Source OnDrawGraphics(Int32, Int64, Int64) Gets called when the timer thread needs to render a new Scene / frame. Declaration protected override void OnDrawGraphics(int frameCount, long frameTime, long deltaTime) Parameters Type Name Description Int32 frameCount Int64 frameTime Int64 deltaTime Overrides GraphicsWindow.OnDrawGraphics(Int32, Int64, Int64) Implements System.IDisposable"
  },
  "api/GameOverlay.Windows.WindowBounds.html": {
    "href": "api/GameOverlay.Windows.WindowBounds.html",
    "title": "Struct WindowBounds | GameOverlay.Net Documentation",
    "keywords": "Struct WindowBounds Represents the boundaries of a window. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public struct WindowBounds Fields | Improve this Doc View Source Bottom The position on the y-axis of the lower-right corner of a window. Declaration public int Bottom Field Value Type Description Int32 | Improve this Doc View Source Left The position on the x-axis of the upper-left corner of a window. Declaration public int Left Field Value Type Description Int32 | Improve this Doc View Source Right The position on the x-axis of the lower-right corner of a window. Declaration public int Right Field Value Type Description Int32 | Improve this Doc View Source Top The position on the y-axis of the upper-left corner of a window. Declaration public int Top Field Value Type Description Int32 Methods | Improve this Doc View Source Equals(WindowBounds) Returns a value indicating whether two specified instances of WindowBounds represent the same value. Declaration public bool Equals(WindowBounds value) Parameters Type Name Description WindowBounds value An object to compare to this instance. Returns Type Description Boolean true if value is equal to this instance; otherwise, false . | Improve this Doc View Source Equals(WindowBounds, WindowBounds) Returns a value indicating whether two specified instances of WindowBounds represent the same value. Declaration public static bool Equals(WindowBounds left, WindowBounds right) Parameters Type Name Description WindowBounds left The first object to compare. WindowBounds right The second object to compare. Returns Type Description Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance and a specified Object represent the same type and value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean true if obj is a WindowBounds and equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Converts this WindowBounds structure to a human-readable string. Declaration public override string ToString() Returns Type Description String A string representation of this WindowBounds. Overrides ValueType.ToString()"
  },
  "api/GameOverlay.Windows.WindowHelper.html": {
    "href": "api/GameOverlay.Windows.WindowHelper.html",
    "title": "Class WindowHelper | GameOverlay.Net Documentation",
    "keywords": "Class WindowHelper Provides methods to interact with windows. Inheritance Object WindowHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : GameOverlay.Windows Assembly : GameOverlay.dll Syntax public static class WindowHelper Methods | Improve this Doc View Source EnableBlurBehind(IntPtr) Enables the blur effect for a window and makes it translucent. Declaration public static void EnableBlurBehind(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A valid handle to a window. The desktop window is not supported. | Improve this Doc View Source ExtendFrameIntoClientArea(IntPtr) Extends a windows frame into the client area of the window. Declaration public static void ExtendFrameIntoClientArea(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window. | Improve this Doc View Source FindChildWindow(IntPtr, String, String, IntPtr) Searches for the first child window matching the search criterias. Declaration public static IntPtr FindChildWindow(IntPtr parentWindow, string childWindowName = null, string childClassName = null, IntPtr childAfter = default(IntPtr)) Parameters Type Name Description IntPtr parentWindow A window handle. String childWindowName The window title of the child window. Can be null. String childClassName The window class of the child window. Can be null. IntPtr childAfter A handle to a child window. The search begins with the next child window in the Z order. The child window must be a direct child window of hwndParent, not just a descendant window. Returns Type Description IntPtr Returns the matching window handle or IntPtr.Zero if none matches. | Improve this Doc View Source FindWindow(String, String) Searches for the first window matching the given parameters. Declaration public static IntPtr FindWindow(string title, string className = null) Parameters Type Name Description String title The window name. Can be null. String className The windows class name. Can be null. Returns Type Description IntPtr Returns the matching window handle or IntPtr.Zero if none matches. | Improve this Doc View Source GenerateRandomClass() Generates a random window class name. Declaration public static string GenerateRandomClass() Returns Type Description String The string this method creates. | Improve this Doc View Source GenerateRandomTitle() Generates a random window title. Declaration public static string GenerateRandomTitle() Returns Type Description String The string this method creates. | Improve this Doc View Source GetActiveWindow() Retrieves the window handle to the active window attached to the calling thread's message queue. Declaration public static IntPtr GetActiveWindow() Returns Type Description IntPtr The return value is the handle to the active window attached to the calling thread's message queue. Otherwise, the return value is NULL. | Improve this Doc View Source GetClassLong(IntPtr, Int32) Retrieves the specified value from the WNDCLASSEX structure associated with the specified window. Declaration public static long GetClassLong(IntPtr handle, int index) Parameters Type Name Description IntPtr handle A window handle. Int32 index The index can be a byte offset or one of the defined constants. Returns Type Description Int64 If the function succeeds, the return value is the requested value. | Improve this Doc View Source GetDesktopWindow() Retrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted. Declaration public static IntPtr GetDesktopWindow() Returns Type Description IntPtr The return value is a handle to the desktop window. | Improve this Doc View Source GetFirstChildWindow(IntPtr) Returns the first child window of the specified parent window if it has one. Declaration public static IntPtr GetFirstChildWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetFirstWindow(IntPtr) Returns the window with the highest position in the Z order relative (Topmost or not) to the given handle. Declaration public static IntPtr GetFirstWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetForegroundWindow() Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads. Declaration public static IntPtr GetForegroundWindow() Returns Type Description IntPtr The return value is a handle to the foreground window. The foreground window can be NULL in certain circumstances, such as when a window is losing activation. | Improve this Doc View Source GetLastWindow(IntPtr) Returns the window with the lowest position in the Z order relative (Topmost or not) to the given handle. Declaration public static IntPtr GetLastWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetNextWindow(IntPtr) Returns the window below the specified window in the Z order. Declaration public static IntPtr GetNextWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetOwnerWindow(IntPtr) Returns the owner window of the specified window if it exists. Declaration public static IntPtr GetOwnerWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetPreviousWindow(IntPtr) Returns the window above the specified window in the Z order. Declaration public static IntPtr GetPreviousWindow(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A window handle. IntPtr.Zero for the desktop window. Returns Type Description IntPtr If the function succeeds, the return value is a window handle. If no window exists with the specified relationship to the specified window, the return value is NULL. | Improve this Doc View Source GetProcessIdFromWindow(IntPtr) Retrieves the identifier of the process that created the window. Declaration public static int GetProcessIdFromWindow(IntPtr handle) Parameters Type Name Description IntPtr handle A handle to the window. Returns Type Description Int32 The return value is the identifier of the process that created the window. | Improve this Doc View Source GetShellWindow() Retrieves a handle to the Shell's desktop window. Declaration public static IntPtr GetShellWindow() Returns Type Description IntPtr The return value is the handle of the Shell's desktop window. If no Shell process is present, the return value is NULL. | Improve this Doc View Source GetWindowBounds(IntPtr, out WindowBounds) Returns the boundaries of a window. Declaration public static bool GetWindowBounds(IntPtr hwnd, out WindowBounds bounds) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window. WindowBounds bounds A WindowBounds structure representing the boundaries of a window. Returns Type Description Boolean | Improve this Doc View Source GetWindowClientBounds(IntPtr, out WindowBounds) Returns the boundaries of a windows client area. Declaration public static bool GetWindowClientBounds(IntPtr hwnd, out WindowBounds bounds) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window. WindowBounds bounds A WindowBounds structure representing the boundaries of a window. Returns Type Description Boolean | Improve this Doc View Source GetWindowClientBoundsExtra(IntPtr, out WindowBounds) Returns the size of the client area of the window possibly with borders. Declaration public static bool GetWindowClientBoundsExtra(IntPtr hwnd, out WindowBounds bounds) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window. WindowBounds bounds A WindowBounds structure representing the boundaries of a window. Returns Type Description Boolean | Improve this Doc View Source GetWindowLong(IntPtr, Int32) Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory. Declaration public static long GetWindowLong(IntPtr handle, int index) Parameters Type Name Description IntPtr handle A window handle. Int32 index The index can be a byte offset or one of the defined constants. Returns Type Description Int64 If the function succeeds, the return value is the requested value. | Improve this Doc View Source GetWindowStyle(IntPtr, out UInt32, out UInt32) Retrieves the style and extended style of a given window. Declaration public static bool GetWindowStyle(IntPtr handle, out uint style, out uint extendedStyle) Parameters Type Name Description IntPtr handle A window handle. UInt32 style Contains the window style on success. UInt32 extendedStyle Contains the extended window style on success. Returns Type Description Boolean Returns true if the function succeeds. | Improve this Doc View Source IsWindow(IntPtr) Determines whether the specified window handle identifies an existing window. Declaration public static bool IsWindow(IntPtr handle) Parameters Type Name Description IntPtr handle A handle to the window to be tested. Returns Type Description Boolean Returns true when the given handle identifies an existing window. | Improve this Doc View Source IsWindowVisible(IntPtr) Determines the visibility state of the specified window. Declaration public static bool IsWindowVisible(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A handle to the window to be tested. Returns Type Description Boolean If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero. | Improve this Doc View Source MakeTopmost(IntPtr) Adds the topmost flag to a window. Declaration public static void MakeTopmost(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window. | Improve this Doc View Source RemoveTopmost(IntPtr) Removes the topmost flag from a window. Declaration public static void RemoveTopmost(IntPtr hwnd) Parameters Type Name Description IntPtr hwnd A IntPtr representing the handle of a window."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Documentation | GameOverlay.Net Documentation",
    "keywords": "Documentation This is where you will find documentation for all members and objects in GameOverlay.Net. Overlay Window The base class for all overlay windows. OverlayWindow Events: OverlayPositionEventArgs OverlaySizeEventArgs OverlayVisibilityEventArgs StickyWindow Inherits from OverlayWindow StickyWindow Graphics Window Inherits from StickyWindow GraphicsWindow Events: DestroyGraphicsEventArgs DrawGraphicsEventArgs SetupGraphicsEventArgs Window Helpers WindowHelper Types: WindowBounds Graphics Color Font Graphics Image LinearGradientBrush Scene SolidBrush Interfaces IBrush Enums CrosshairStyle Geometry Circle Ellipse Geometry Line Point Rectangle RoundedRectangle Triangle"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | GameOverlay.Net Documentation",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "GameOverlay.Net Documentation | GameOverlay.Net Documentation",
    "keywords": "GameOverlay.Net Documentation What is GameOverlay.Net? GameOverlay.Net offers a comprehensive interface for drawing hardware accelerated graphics using our Direct2D1 renderer and creating transparent click-through windows. Installation You can install this library using the NuGet Package Manager. Install-Package GameOverlay.Net Where to start? You can find all relevant classes in our api documentation. Api Documentation Examples Additional Resources GitHub NuGet Donate Do you like this project and want to help me to keep working on it? Then maybe consider to donate any amount you like. BTC 14ES7f4GB3vD1C8Faz6ywqTcdDevxZoMyY ETH 0xd9E2CB12d310E7BF5E72F591D7A2b8820adced04"
  }
}